import asyncio
import os
import aiohttp
from aiogram import Bot, types, Dispatcher
from aiogram.types import InputMediaPhoto, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text, Command
from datetime import datetime, timedelta
import sys
from pathlib import Path
from dotenv import load_dotenv
import io

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ Python path
sys.path.append(str(Path(__file__).parent.parent))
from tools.logger import Logger
from tools.database import Database
from tools.email_service import EmailService
import secrets


# FSM States –¥–ª—è –±–æ—Ç–∞
class OwnerRegistration(StatesGroup):
    waiting_for_email = State()
    waiting_for_code = State()

class AdminApplication(StatesGroup):
    waiting_for_email = State()

class PasswordChange(StatesGroup):
    waiting_for_new_password = State()
    waiting_for_password_confirm = State()


class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '6211838784:AAGbiyen0yYKXSAlUibHq-wMnEfPC34mawo')
        self.bot = Bot(token=self.bot_token)
        self.storage = MemoryStorage()
        self.dp = Dispatcher(self.bot, storage=self.storage)
        self.logger = Logger()
        self.db = Database()
        self.email_service = EmailService()
        
        # –í–ª–∞—Å–Ω–∏–∫–∏ CRM
        owner_chat_ids_str = os.getenv('OWNER_CHAT_IDS', '')
        self.owner_chat_ids = [int(chat_id.strip()) for chat_id in owner_chat_ids_str.split(',') if chat_id.strip()]
        
        # –ö–∞–Ω–∞–ª–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
        self.channels = {
            'commerce': '@comodc',  # –ö–æ–º–µ—Ä—Ü—ñ—è
            'prodazh': '@comodmodmc',  # –ü—Ä–æ–¥–∞–∂—ñ
            'zemlya': '@comodmodmdfdfc',  # –ó–µ–º–µ–ª—å–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏
            'orenda': '@comodcv'  # –û—Ä–µ–Ω–¥–∞
        }
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.dp.register_message_handler(self.cmd_start, commands=['start'])
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–ª–∞—Å–Ω–∏–∫–∞
        self.dp.register_callback_query_handler(
            self.handle_owner_actions, 
            lambda c: c.data.startswith("owner_")
        )
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω–∞
        self.dp.register_callback_query_handler(
            self.handle_admin_actions, 
            lambda c: c.data.startswith("admin_")
        )
        
        # FSM –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–ª–∞—Å–Ω–∏–∫–∞
        self.dp.register_message_handler(
            self.process_owner_email, 
            state=OwnerRegistration.waiting_for_email
        )
        self.dp.register_message_handler(
            self.process_owner_verification, 
            state=OwnerRegistration.waiting_for_code
        )
        
        # FSM –¥–ª—è –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞
        self.dp.register_message_handler(
            self.process_admin_email, 
            state=AdminApplication.waiting_for_email
        )
        
        # FSM –¥–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—é
        self.dp.register_message_handler(
            self.process_new_password, 
            state=PasswordChange.waiting_for_new_password
        )
        self.dp.register_message_handler(
            self.process_password_confirm, 
            state=PasswordChange.waiting_for_password_confirm
        )
    
    async def cmd_start(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        user_id = message.from_user.id
        user_info = message.from_user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–ª–∞—Å–Ω–∏–∫–æ–º
        if user_id in self.owner_chat_ids:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–ª–∞—Å–Ω–∏–∫ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            owner = await self.db.admins.find_one({"telegram_id": user_id, "role": "owner"})
            
            if not owner:
                # –í–ª–∞—Å–Ω–∏–∫ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("üîê –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —è–∫ –≤–ª–∞—Å–Ω–∏–∫", callback_data="owner_register"))
                
                await message.answer(
                    f"üëã –í—ñ—Ç–∞—é, {user_info.first_name}!\n\n"
                    f"–í–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –≤–ª–∞—Å–Ω–∏–∫ CRM —Å–∏—Å—Ç–µ–º–∏.\n"
                    f"–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è.",
                    reply_markup=keyboard
                )
            else:
                # –í–ª–∞—Å–Ω–∏–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π - –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é
                await self.show_owner_menu(message)
        else:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º
            admin = await self.db.admins.find_one({"telegram_id": user_id})
            
            if admin:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω–æ–º
                await message.answer(
                    f"üëã –í—ñ—Ç–∞—é, {admin['first_name']}!\n\n"
                    f"–í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä CRM —Å–∏—Å—Ç–µ–º–∏.\n"
                    f"–î–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Å–∏—Å—Ç–µ–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
                )
            else:
                # –ó–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É
                keyboard = InlineKeyboardMarkup(row_width=1)
                keyboard.add(InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_apply"))
                
                await message.answer(
                    f"üëã –í—ñ—Ç–∞—é, {user_info.first_name}!\n\n"
                    f"–¶–µ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è CRM —Å–∏—Å—Ç–µ–º–æ—é.\n"
                    f"–©–æ–± —Å—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É.",
                    reply_markup=keyboard
                )
    
    async def show_owner_menu(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–ª–∞—Å–Ω–∏–∫–∞"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("üè• –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞", callback_data="owner_check_server"),
            InlineKeyboardButton("üìä –õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä—ñ–≤", callback_data="owner_parser_logs"),
            InlineKeyboardButton("üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ–≤", callback_data="owner_view_applications"),
            InlineKeyboardButton("üë®‚Äçüíº –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤", callback_data="owner_view_admins"),
            InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞", callback_data="owner_delete_admin"),
            InlineKeyboardButton("üîë –ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="owner_change_password")
        )
        
        await message.answer(
            "üîß <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫–∞</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    
    async def handle_owner_actions(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –≤–ª–∞—Å–Ω–∏–∫–∞"""
        action = callback.data.replace("owner_", "")
        
        if action == "register":
            await callback.message.answer(
                "üìß <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–ª–∞—Å–Ω–∏–∫–∞</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É:",
                parse_mode='HTML'
            )
            await OwnerRegistration.waiting_for_email.set()
            
        elif action == "view_applications":
            await self.show_admin_applications(callback.message)
            
        elif action == "view_admins":
            await self.show_admins_list(callback.message)
            
        elif action == "delete_admin":
            await self.show_admins_for_deletion(callback.message)
            
        elif action.startswith("approve_"):
            app_id = action.replace("approve_", "")
            await self.approve_admin_application(callback, app_id)
            
        elif action.startswith("reject_"):
            app_id = action.replace("reject_", "")
            await self.reject_admin_application(callback, app_id)
            
        elif action.startswith("delete_admin_"):
            admin_id = action.replace("delete_admin_", "")
            await self.delete_admin(callback, admin_id)
            
        elif action == "change_password":
            await self.start_password_change(callback, state)
            
        elif action == "check_server":
            await self.check_server_status(callback)
            
        elif action == "parser_logs":
            await self.show_parser_logs(callback)
        
        await callback.answer()
    
    async def handle_admin_actions(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∞–¥–º—ñ–Ω—ñ–≤"""
        action = callback.data.replace("admin_", "")
        
        if action == "apply":
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –ø–æ–¥–∞–≤–∞–≤ –∑–∞—è–≤–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            user_id = callback.from_user.id
            twenty_four_hours_ago = datetime.utcnow() - timedelta(hours=24)
            recent_application = await self.db.admin_applications.find_one({
                "telegram_id": user_id,
                "created_at": {"$gte": twenty_four_hours_ago}
            })
            
            if recent_application:
                if recent_application.get("status") == "pending":
                    await callback.message.answer(
                        "‚è≥ <b>–ó–∞—è–≤–∫–∞ –≤–∂–µ –≤ –æ–±—Ä–æ–±—Ü—ñ</b>\n\n"
                        "–í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {recent_application['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                        f"üìß Email: {recent_application['email']}\n\n"
                        "–û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Å–∏—Å—Ç–µ–º–∏. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                        parse_mode='HTML'
                    )
                else:
                    await callback.message.answer(
                        "‚è≥ <b>–ü–æ–≤—Ç–æ—Ä–Ω—É –∑–∞—è–≤–∫—É –º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏</b>\n\n"
                        f"–û—Å—Ç–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞: {recent_application['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                        f"–°—Ç–∞—Ç—É—Å: {'–°—Ö–≤–∞–ª–µ–Ω–∞' if recent_application.get('status') == 'approved' else '–í—ñ–¥—Ö–∏–ª–µ–Ω–∞'}\n\n"
                        "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                        parse_mode='HTML'
                    )
                await callback.answer()
                return
            
            await callback.message.answer(
                "üìù <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É –¥–ª—è –∑–≤'—è–∑–∫—É:",
                parse_mode='HTML'
            )
            await AdminApplication.waiting_for_email.set()
        
        await callback.answer()
    
    async def process_owner_email(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ email –≤–ª–∞—Å–Ω–∏–∫–∞"""
        email = message.text.strip().lower()
        
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        verification_code = str(secrets.randbelow(900000) + 100000)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—ñ
        verification_data = {
            "telegram_id": message.from_user.id,
            "email": email,
            "code": verification_code,
            "created_at": datetime.utcnow(),
            "expires_at": datetime.utcnow() + timedelta(minutes=10),
            "type": "owner_registration"
        }
        await self.db.verification_codes.create(verification_data)
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
        try:
            await self.email_service.send_verification_email(
                email=email,
                verification_code=verification_code,
                user_name="–í–ª–∞—Å–Ω–∏–∫ CRM",
                language="uk"
            )
            
            await message.answer(
                f"üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ email:"
            )
            await state.update_data(email=email)
            await OwnerRegistration.waiting_for_code.set()
            
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
            await state.finish()
    
    async def process_owner_verification(self, message: types.Message, state: FSMContext):
        """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–¥—É –≤–ª–∞—Å–Ω–∏–∫–∞"""
        code = message.text.strip()
        data = await state.get_data()
        email = data.get("email")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥
        verification = await self.db.verification_codes.find_one({
            "telegram_id": message.from_user.id,
            "code": code,
            "type": "owner_registration"
        })
        
        if not verification or verification["expires_at"] < datetime.utcnow():
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π –∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞
        owner_data = {
            "first_name": message.from_user.first_name or "–í–ª–∞—Å–Ω–∏–∫",
            "last_name": message.from_user.last_name or "CRM",
            "email": email,
            "phone": "",
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow(),
            "login": email,
            "password": None,
            "language_code": "uk",
            "is_verified": True,
            "role": "owner",
            "telegram_id": message.from_user.id
        }
        
        await self.db.admins.create(owner_data)
        await self.db.verification_codes.delete({"code": code})
        
        await message.answer(
            "‚úÖ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
            "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–ª–∞—Å–Ω–∏–∫ CRM —Å–∏—Å—Ç–µ–º–∏.",
            parse_mode='HTML'
        )
        
        await state.finish()
        await self.show_owner_menu(message)
    
    async def process_admin_email(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ email –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω–∞"""
        email = message.text.strip().lower()
        
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        user_info = message.from_user
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∞–¥–º—ñ–Ω
        existing_admin = await self.db.admins.find_one({"email": email})
        if existing_admin:
            await message.answer("‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.")
            await state.finish()
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –ø–æ–¥–∞–≤–∞–≤ –∑–∞—è–≤–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
        twenty_four_hours_ago = datetime.utcnow() - timedelta(hours=24)
        recent_application = await self.db.admin_applications.find_one({
            "telegram_id": user_info.id,
            "created_at": {"$gte": twenty_four_hours_ago}
        })
        
        if recent_application:
            if recent_application.get("status") == "pending":
                await message.answer(
                    "‚è≥ <b>–ó–∞—è–≤–∫–∞ –≤–∂–µ –≤ –æ–±—Ä–æ–±—Ü—ñ</b>\n\n"
                    "–í–∏ –≤–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                    f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á—ñ: {recent_application['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìß Email: {recent_application['email']}\n\n"
                    "–û—á—ñ–∫—É–π—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Å–∏—Å—Ç–µ–º–∏. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
                    parse_mode='HTML'
                )
            else:
                await message.answer(
                    "‚è≥ <b>–ü–æ–≤—Ç–æ—Ä–Ω—É –∑–∞—è–≤–∫—É –º–æ–∂–Ω–∞ –ø–æ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏</b>\n\n"
                    f"–û—Å—Ç–∞–Ω–Ω—è –∑–∞—è–≤–∫–∞: {recent_application['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–°—Ö–≤–∞–ª–µ–Ω–∞' if recent_application.get('status') == 'approved' else '–í—ñ–¥—Ö–∏–ª–µ–Ω–∞'}\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    parse_mode='HTML'
                )
            await state.finish()
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É
        application_data = {
            "telegram_id": user_info.id,
            "email": email,
            "first_name": user_info.first_name or "–ù–µ–≤—ñ–¥–æ–º–æ",
            "last_name": user_info.last_name or "",
            "username": user_info.username or "",
            "created_at": datetime.utcnow(),
            "status": "pending",
            "type": "admin_application"
        }
        
        app_id = await self.db.admin_applications.create(application_data)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –≤–ª–∞—Å–Ω–∏–∫—ñ–≤
        for owner_chat_id in self.owner_chat_ids:
            try:
                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"owner_approve_{app_id}"),
                    InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"owner_reject_{app_id}")
                )
                
                user_link = f"@{user_info.username}" if user_info.username else f"ID: {user_info.id}"
                
                await self.bot.send_message(
                    chat_id=owner_chat_id,
                    text=f"üìù <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                         f"üë§ –Ü–º'—è: {user_info.first_name} {user_info.last_name or ''}\n"
                         f"üì± Telegram: {user_link}\n"
                         f"üìß Email: {email}\n"
                         f"üïê –î–∞—Ç–∞: {application_data['created_at'].strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except:
                pass
        
        await message.answer(
            "‚úÖ <b>–ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è –≤–ª–∞—Å–Ω–∏–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º–∏.\n"
            "–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            parse_mode='HTML'
        )
        await state.finish()
    
    async def show_admin_applications(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        applications = await self.db.admin_applications.find({"status": "pending"})
        if not applications:
            await message.answer("üìù <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", parse_mode='HTML')
            return
        
        message_text = "üìù <b>–ù–æ–≤—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        
        for i, app in enumerate(applications, 1):
            user_link = f"@{app.get('username')}" if app.get('username') else f"ID: {app.get('telegram_id', '–Ω–µ–≤—ñ–¥–æ–º–∏–π')}"
            message_text += f"<b>{i}. {app['first_name']} {app.get('last_name', '')}</b>\n"
            message_text += f"üì± Telegram: {user_link}\n"
            message_text += f"üìß Email: {app['email']}\n"
            message_text += f"üïê –î–∞—Ç–∞: {app['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∑–∞—è–≤–∫–∏ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"owner_approve_{app['_id']}"),
                InlineKeyboardButton(f"‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"owner_reject_{app['_id']}")
            )
            
            await message.answer(
                f"üë§ <b>–ó–∞—è–≤–∫–∞ #{i}</b>\n\n"
                f"üìù –Ü–º'—è: {app['first_name']} {app.get('last_name', '')}\n"
                f"üì± Telegram: {user_link}\n"
                f"üìß Email: {app['email']}\n"
                f"üïê –î–∞—Ç–∞: {app['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=keyboard, 
                parse_mode='HTML'
            )
    
    async def show_admins_list(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤"""
        admins = await self.db.admins.find({"role": "admin"})
        if not admins:
            await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ–≤ –≤ —Å–∏—Å—Ç–µ–º—ñ.")
            return
        
        message_text = "üë®‚Äçüíº <b>–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ CRM —Å–∏—Å—Ç–µ–º–∏</b>\n\n"
        for admin in admins:
            message_text += f"üë§ –Ü–º'—è: {admin['first_name']} {admin.get('last_name', '')}\n"
            message_text += f"üìß Email: {admin.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            message_text += f"üì± Telegram ID: {admin.get('telegram_id', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            message_text += f"üïê –°—Ç–≤–æ—Ä–µ–Ω–æ: {admin['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            message_text += f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ: {'–¢–∞–∫' if admin.get('is_verified') else '–ù—ñ'}\n\n"
        
        await message.answer(message_text, parse_mode='HTML')
    
    async def show_admins_for_deletion(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        admins = await self.db.admins.find({"role": "admin"})
        if not admins:
            await message.answer("üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ–≤</b>\n\n–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–¥–º—ñ–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", parse_mode='HTML')
            return
        
        await message.answer("üóëÔ∏è <b>–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ–≤</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∞–¥–º—ñ–Ω–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", parse_mode='HTML')
        
        for i, admin in enumerate(admins, 1):
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton(
                    f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", 
                    callback_data=f"owner_delete_admin_{admin['_id']}"
                )
            )
            
            await message.answer(
                f"üë§ <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä #{i}</b>\n\n"
                f"üìù –Ü–º'—è: {admin['first_name']} {admin.get('last_name', '')}\n"
                f"üìß Email: {admin.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üì± Telegram ID: {admin.get('telegram_id', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üïê –°—Ç–≤–æ—Ä–µ–Ω–æ: {admin['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ö†Ô∏è –î—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!",
                reply_markup=keyboard, 
                parse_mode='HTML'
            )
    
    async def approve_admin_application(self, callback: types.CallbackQuery, app_id: str):
        """–ü—Ä–∏–π–Ω—è—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from bson import ObjectId
            app = await self.db.admin_applications.find_one({"_id": ObjectId(app_id)})
            if not app:
                await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            if app.get("status") != "pending":
                await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –∞–¥–º—ñ–Ω
            existing_admin = await self.db.admins.find_one({"email": app["email"]})
            if existing_admin:
                await callback.message.edit_text("‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î.")
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω–∞
            admin_data = {
                "first_name": app["first_name"],
                "last_name": app.get("last_name", ""),
                "email": app["email"],
                "phone": "",
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow(),
                "login": app["email"],
                "password": None,
                "language_code": "uk",
                "is_verified": True,
                "role": "admin",
                "telegram_id": app["telegram_id"]
            }
            
            await self.db.admins.create(admin_data)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞—è–≤–∫—É
            await self.db.admin_applications.update(
                {"_id": ObjectId(app_id)}, 
                {
                    "$set": {
                        "status": "approved", 
                        "approved_by": callback.from_user.id, 
                        "approved_at": datetime.utcnow()
                    }
                }
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∑–∞—è–≤–Ω–∏–∫–∞
            try:
                await self.bot.send_message(
                    chat_id=app["telegram_id"],
                    text="üéâ <b>–í—ñ—Ç–∞—î–º–æ!</b>\n\n"
                         "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å—Ö–≤–∞–ª–µ–Ω–∞!\n"
                         "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram.",
                    parse_mode='HTML'
                )
            except:
                pass
            
            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∫–Ω–æ–ø–∫–∏
            await callback.message.edit_text(
                f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!</b>\n\n"
                f"üë§ {app['first_name']} {app.get('last_name', '')} —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                f"‚è∞ –ü—Ä–∏–π–Ω—è—Ç–∞: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    async def reject_admin_application(self, callback: types.CallbackQuery, app_id: str):
        """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from bson import ObjectId
            app = await self.db.admin_applications.find_one({"_id": ObjectId(app_id)})
            if not app:
                await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—è–≤–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞
            if app.get("status") != "pending":
                await callback.message.edit_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –≤–∂–µ –±—É–ª–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —Ä–∞–Ω—ñ—à–µ.")
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞—è–≤–∫—É
            await self.db.admin_applications.update(
                {"_id": ObjectId(app_id)}, 
                {
                    "$set": {
                        "status": "rejected", 
                        "rejected_by": callback.from_user.id, 
                        "rejected_at": datetime.utcnow()
                    }
                }
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∑–∞—è–≤–Ω–∏–∫–∞
            try:
                await self.bot.send_message(
                    chat_id=app["telegram_id"],
                    text="‚ùå <b>–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>\n\n"
                         "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n"
                         "–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –ø—ñ–∑–Ω—ñ—à–µ.",
                    parse_mode='HTML'
                )
            except:
                pass
            
            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∫–Ω–æ–ø–∫–∏
            await callback.message.edit_text(
                f"‚ùå <b>–ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞!</b>\n\n"
                f"üë§ –ó–∞—è–≤–∫–∞ –≤—ñ–¥ {app['first_name']} {app.get('last_name', '')} –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.\n"
                f"‚è∞ –í—ñ–¥—Ö–∏–ª–µ–Ω–∞: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    async def delete_admin(self, callback: types.CallbackQuery, admin_id: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞"""
        try:
            from bson import ObjectId
            admin = await self.db.admins.find_one({"_id": ObjectId(admin_id)})
            if not admin:
                await callback.message.edit_text("‚ùå –ê–¥–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏
            await self.db.admins.delete({"_id": ObjectId(admin_id)})
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
            try:
                await self.bot.send_message(
                    chat_id=admin["telegram_id"],
                    text="‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b>\n\n"
                         "–í–∞—à—ñ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—É–ª–∏ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ.\n"
                         "–Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–ª–∞—Å–Ω–∏–∫—ñ–≤ —Å–∏—Å—Ç–µ–º–∏.",
                    parse_mode='HTML'
                )
            except:
                pass
            
            # –†–µ–¥–∞–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏, –ø—Ä–∏–±–∏—Ä–∞—é—á–∏ –∫–Ω–æ–ø–∫–∏
            await callback.message.edit_text(
                f"üóëÔ∏è <b>–ê–¥–º—ñ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ!</b>\n\n"
                f"üë§ {admin['first_name']} {admin.get('last_name', '')} –±—ñ–ª—å—à–µ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                f"‚è∞ –í–∏–¥–∞–ª–µ–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M')}",
                parse_mode='HTML'
            )
            
        except Exception as e:
            await callback.message.edit_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    async def start_admin_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º–∏"""
        try:
            await self.db.setup_indexes()
            self.logger.info("ü§ñ Telegram Admin Bot –∑–∞–ø—É—â–µ–Ω–æ...")
            await self.dp.start_polling()
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        finally:
            await self.close()
    
    def format_price(self, listing_data):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏"""
        price = listing_data.get('price')
        currency = listing_data.get('currency', 'UAH')
        
        if not price:
            return "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
        
        if currency == 'UAH':
            return f"üí∞ {price:,} –≥—Ä–Ω".replace(',', ' ')
        elif currency == 'USD':
            return f"üí∞ ${price:,}".replace(',', ' ')
        elif currency == 'EUR':
            return f"üí∞ ‚Ç¨{price:,}".replace(',', ' ')
        else:
            return f"üí∞ {price:,} {currency}".replace(',', ' ')
    
    def format_listing_message(self, listing_data):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram"""
        title = listing_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = self.format_price(listing_data)
        phone = listing_data.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
        location = listing_data.get('location', listing_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
        area = listing_data.get('area')
        floor = listing_data.get('floor')
        tags = listing_data.get('tags', [])
        url = listing_data.get('url', '')
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        message = f"üè† <b>{title}</b>\n\n"
        message += f"{price}\n"
        
        if phone and phone != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ':
            message += f"üìû {phone}\n"
        
        if location and location != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ':
            message += f"üìç {location}\n"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        details = []
        if area:
            details.append(f"üìê {area} –º¬≤")
        if floor:
            details.append(f"üè¢ {floor} –ø–æ–≤–µ—Ä—Ö")
        
        if details:
            message += f"\n{' ‚Ä¢ '.join(details)}\n"
        
        # –¢–µ–≥–∏ (–ø–µ—Ä—à—ñ 3-4)
        if tags:
            relevant_tags = [tag for tag in tags[:4] if not any(x in tag.lower() for x in ['–ø—ñ–¥–Ω—è—Ç–∏', '—Ç–æ–ø', '–ø—Ä–∏–≤–∞—Ç–Ω–∞ –æ—Å–æ–±–∞'])]
            if relevant_tags:
                message += f"\nüè∑Ô∏è {' ‚Ä¢ '.join(relevant_tags)}\n"
        
        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
        if url:
            message += f"\nüîó <a href='{url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</a>"
        
        message += f"\n\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return message
    
    def is_valid_image_url(self, url):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω–∏–º"""
        if not url or not isinstance(url, str):
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ http/https
        if not url.startswith(('http://', 'https://')):
            return False
            
        url_lower = url.lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ –≤—ñ–¥–æ–º–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp')
        if any(ext in url_lower for ext in image_extensions):
            return True
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–æ–º—ñ –¥–æ–º–µ–Ω–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–∞ —ó—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —à–ª—è—Ö–∏
        if 'olxcdn.com' in url_lower and ('/image' in url_lower or '/files/' in url_lower):
            return True
            
        if 'm2bomber.com' in url_lower and ('/storage/' in url_lower or '/images/' in url_lower):
            return True
            
        if 'apollo-ireland.akamaized.net' in url_lower:
            return True
            
        return False

    async def download_image(self, url):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è Telegram"""
        try:
            headers = {
                'User-Admin': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36',
                'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
                'Accept-Language': 'uk-UA,uk;q=0.9,en;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
            
            # –î–æ–¥–∞—î–º–æ Referer –¥–ª—è OLX
            if 'olx' in url.lower():
                headers['Referer'] = 'https://www.olx.ua/'
            elif 'm2bomber' in url.lower():
                headers['Referer'] = 'https://ua.m2bomber.com/'
            
            # –í—ñ–¥–∫–ª—é—á–∞—î–º–æ SSL –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤
            ssl = False if any(domain in url.lower() for domain in ['m2bomber.com', 'olxcdn.com']) else None
            
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, headers=headers, ssl=ssl) as response:
                    if response.status == 200:
                        content = await response.read()
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        content_type = response.headers.get('content-type', '').lower()
                        if content_type.startswith('image/'):
                            return io.BytesIO(content)
            return None
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {url}: {e}")
            return None

    async def send_to_channel(self, listing_data):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É"""
        try:
            property_type = listing_data.get('property_type', 'unknown')
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞–Ω–∞–ª
            channel_id = self.channels.get(property_type)
            if not channel_id:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {property_type}")
                return False
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = self.format_listing_message(listing_data)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            images = listing_data.get('images', [])
            valid_images = [img for img in images if self.is_valid_image_url(img)][:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –∑–æ–±—Ä–∞–∂–µ–Ω—å
            
            if valid_images:
                try:
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    downloaded_images = []
                    for i, image_url in enumerate(valid_images[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                        image_data = await self.download_image(image_url)
                        if image_data:
                            downloaded_images.append(image_data)
                    
                    if downloaded_images:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–º–∏ —Ñ–æ—Ç–æ
                        if len(downloaded_images) == 1:
                            # –û–¥–Ω–µ —Ñ–æ—Ç–æ
                            await self.bot.send_photo(
                                chat_id=channel_id,
                                photo=InputFile(downloaded_images[0]),
                                caption=message_text,
                                parse_mode='HTML'
                            )
                        else:
                            # –ö—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ
                            media_group = []
                            for i, image_data in enumerate(downloaded_images):
                                if i == 0:
                                    # –ü–µ—Ä—à–µ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                                    media_group.append(
                                        InputMediaPhoto(media=InputFile(image_data), caption=message_text, parse_mode='HTML')
                                    )
                                else:
                                    # –Ü–Ω—à—ñ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
                                    media_group.append(InputMediaPhoto(media=InputFile(image_data)))
                            
                            await self.bot.send_media_group(
                                chat_id=channel_id,
                                media=media_group
                            )
                    else:
                        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∂–æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                        raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
                        
                except Exception as photo_error:
                    # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑ —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ –Ω–∏—Ö
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å.")
                    await self.bot.send_message(
                        chat_id=channel_id,
                        text=message_text,
                        parse_mode='HTML',
                        disable_web_page_preview=False
                    )
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ
                await self.bot.send_message(
                    chat_id=channel_id,
                    text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
            
            self.logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}: {listing_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def start_password_change(self, callback: types.CallbackQuery, state: FSMContext):
        """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—é"""
        await callback.message.answer(
            "üîë <b>–ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—é</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞:\n\n"
            "‚ö†Ô∏è <b>–í–∏–º–æ–≥–∏ –¥–æ –ø–∞—Ä–æ–ª—é:</b>\n"
            "‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤\n"
            "‚Ä¢ –ú–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å",
            parse_mode='HTML'
        )
        await PasswordChange.waiting_for_new_password.set()
    
    async def process_new_password(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—é"""
        password = message.text.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—é
        if len(password) < 6:
            await message.answer(
                "‚ùå <b>–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π!</b>\n\n"
                "–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 6 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return
        
        if len(password) > 128:
            await message.answer(
                "‚ùå <b>–ü–∞—Ä–æ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π!</b>\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é - 128 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏
        try:
            await message.delete()
        except:
            pass
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —É —Å—Ç–µ–π—Ç—ñ
        await state.update_data(new_password=password)
        
        await message.answer(
            "üîí <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é</b>\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:",
            parse_mode='HTML'
        )
        await PasswordChange.waiting_for_password_confirm.set()
    
    async def process_password_confirm(self, message: types.Message, state: FSMContext):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é"""
        confirm_password = message.text.strip()
        data = await state.get_data()
        new_password = data.get("new_password")
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏
        try:
            await message.delete()
        except:
            pass
        
        if not new_password:
            await message.answer(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n\n"
                "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ü–µ—Å –∑–∞–Ω–æ–≤–æ.",
                parse_mode='HTML'
            )
            await state.finish()
            return
        
        if new_password != confirm_password:
            await message.answer(
                "‚ùå <b>–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑:",
                parse_mode='HTML'
            )
            await PasswordChange.waiting_for_new_password.set()
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        try:
            import bcrypt
            hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            user_id = message.from_user.id
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤–ª–∞—Å–Ω–∏–∫
            owner = await self.db.admins.find_one({"telegram_id": user_id, "role": "owner"})
            if not owner:
                await message.answer(
                    "‚ùå <b>–ü–æ–º–∏–ª–∫–∞!</b>\n\n"
                    "–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–ª–∞—Å–Ω–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ.",
                    parse_mode='HTML'
                )
                await state.finish()
                return
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å
            await self.db.admins.update(
                {"telegram_id": user_id, "role": "owner"},
                {"$set": {
                    "password": hashed_password,
                    "updated_at": datetime.utcnow()
                }}
            )
            
            await message.answer(
                "‚úÖ <b>–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!</b>\n\n"
                f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å CRM —Å–∏—Å—Ç–µ–º–∏.\n\n"
                f"üîê <b>–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Ö–æ–¥—É:</b>\n"
                f"üìß Email: {owner.get('email', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üîë –ü–∞—Ä–æ–ª—å: (—â–æ–π–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π)\n\n"
                f"üåê –£–≤—ñ–π–¥—ñ—Ç—å —á–µ—Ä–µ–∑ /admin/auth/login",
                parse_mode='HTML'
            )
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
            self.logger.info(f"Password changed for owner {user_id}")
                
        except Exception as e:
            await message.answer(
                f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—é:</b>\n\n"
                f"{str(e)}",
                parse_mode='HTML'
            )
            self.logger.error(f"Error changing password for owner {message.from_user.id}: {e}")
        
        finally:
            await state.finish()

    async def check_server_status(self, callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            import psutil
            import subprocess
            import requests
            from datetime import datetime
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ API - –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –≤ —Ç–æ–º—É –∂ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ —â–æ —ñ API
            api_status = "‚úÖ –ü—Ä–∞—Ü—é—î (–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π)"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ - –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –≤ Docker
            docker_status = "‚úÖ –ó–∞–ø—É—â–µ–Ω–æ (–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ)"
            
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å Python –ø—Ä–æ—Ü–µ—Å—ñ–≤
            python_processes = len([p for p in psutil.process_iter(['name']) if 'python' in p.info['name'].lower()])
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            status_message = (
                f"üè• <b>–°—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞</b>\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                
                f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                f"üíæ –ü–∞–º'—è—Ç—å: {memory.percent:.1f}% ({memory.used // (1024**3):.1f}GB / {memory.total // (1024**3):.1f}GB)\n"
                f"üíø –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // (1024**3):.1f}GB / {disk.total // (1024**3):.1f}GB)\n"
                f"‚ö° CPU: {cpu_percent:.1f}%\n\n"
                
                f"üê≥ <b>–°–µ—Ä–≤—ñ—Å–∏:</b>\n"
                f"üåê API: {api_status}\n"
                f"üì¶ Docker: {docker_status}\n"
                f"üêç Python –ø—Ä–æ—Ü–µ—Å—ñ–≤: {python_processes}\n\n"
            )
            
            # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫
            if memory.percent > 85:
                status_message += "‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b> –í–∏—Å–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º'—è—Ç—ñ!\n"
            if disk.percent > 90:
                status_message += "‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b> –ú–∞–ª–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É!\n"
            if python_processes > 10:
                status_message += "‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b> –ó–∞–±–∞–≥–∞—Ç–æ Python –ø—Ä–æ—Ü–µ—Å—ñ–≤!\n"
            if api_status == "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–µ":
                status_message += "üö® <b>–ö–†–ò–¢–ò–ß–ù–û:</b> API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î!\n"
                
        except Exception as e:
            status_message = (
                f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
                f"{str(e)}\n\n"
                f"–ú–æ–∂–ª–∏–≤–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –º–µ—Ä–µ–∂–µ—é."
            )
            
        await callback.message.answer(status_message, parse_mode='HTML')

    async def show_parser_logs(self, callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä—ñ–≤"""
        try:
            import os
            from pathlib import Path
            
            # –°–ø—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ª–æ–≥–∏ –∑ —Ñ–∞–π–ª—É —Å–∏—Å—Ç–µ–º–∏
            log_file_paths = [
                "/app/logs/parser.log",  # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥ –ø–∞—Ä—Å–µ—Ä–∞ (—Å–ø—ñ–ª—å–Ω–∏–π —Ç–æ–º)
                "/app/system/system.log",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ª–æ–≥ –ø–∞—Ä—Å–µ—Ä–∞
                "/app/monitoring_logs/parser.log",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —à–ª—è—Ö
                "/var/log/parser.log"  # –°–∏—Å—Ç–µ–º–Ω–∏–π –ª–æ–≥
            ]
            
            logs_content = ""
            log_source = ""
            
            # –®—É–∫–∞—î–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
            for log_path in log_file_paths:
                if os.path.exists(log_path):
                    try:
                        with open(log_path, 'r', encoding='utf-8') as f:
                            # –ß–∏—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 —Ä—è–¥–∫—ñ–≤
                            lines = f.readlines()
                            logs_content = ''.join(lines[-50:])
                            log_source = log_path
                            break
                    except Exception as e:
                        continue
            
            # –Ø–∫—â–æ –ª–æ–≥ —Ñ–∞–π–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –ø–æ–∫–∞–∂–µ–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω –ø–∞—Ä—Å–µ—Ä–∞
            if not logs_content:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å–∏ Python
                    import psutil
                    python_processes = []
                    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time']):
                        try:
                            if 'python' in proc.info['name'].lower():
                                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                                if 'system/main.py' in cmdline or 'parser' in cmdline.lower():
                                    python_processes.append({
                                        'pid': proc.info['pid'],
                                        'cmd': cmdline[:100] + '...' if len(cmdline) > 100 else cmdline,
                                        'time': datetime.fromtimestamp(proc.info['create_time']).strftime('%H:%M:%S')
                                    })
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue
                    
                    logs_content = f"üîç –ê–∫—Ç–∏–≤–Ω—ñ –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ü–µ—Å–∏:\n\n"
                    for proc in python_processes[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                        logs_content += f"PID: {proc['pid']} | {proc['time']}\n{proc['cmd']}\n\n"
                    
                    log_source = "system processes"
                    
                except Exception as e:
                    logs_content = f"‚ùå –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –ü—Ä–∏—á–∏–Ω–∞: {str(e)}"
                    log_source = "error"
            
            # –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(logs_content) > 3500:
                logs_content = "...\n" + logs_content[-3500:]
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ª–æ–≥–∏
            status_message = (
                f"üìä <b>–õ–æ–≥–∏ –ø–∞—Ä—Å–µ—Ä–∞</b>\n"
                f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"üìç –î–∂–µ—Ä–µ–ª–æ: {log_source}\n\n"
                f"<code>{logs_content if logs_content else '–õ–æ–≥–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ'}</code>"
            )
                
        except Exception as e:
            status_message = (
                f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª–æ–≥—ñ–≤:</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üí° <b>–ü–æ—Ä–∞–¥–∞:</b> –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞'"
            )
            
        await callback.message.answer(status_message, parse_mode='HTML')

    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞"""
        try:
            session = await self.bot.get_session()
            await session.close()
        except:
            pass 