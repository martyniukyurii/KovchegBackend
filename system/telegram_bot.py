import asyncio
import os
from aiogram import Bot, types
from aiogram.types import InputMediaPhoto
from datetime import datetime
import sys
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ tools –¥–æ Python path –¥–ª—è –ª–æ–≥–µ—Ä–∞
sys.path.append(str(Path(__file__).parent.parent / "tools"))
from logger import Logger

class TelegramBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '6211838784:AAGbiyen0yYKXSAlUibHq-wMnEfPC34mawo')
        self.bot = Bot(token=self.bot_token)
        self.logger = Logger()
        
        # –ö–∞–Ω–∞–ª–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
        self.channels = {
            'commerce': '@comodc',  # –ö–æ–º–µ—Ä—Ü—ñ—è
            'prodazh': '@comodmodmc',  # –ü—Ä–æ–¥–∞–∂—ñ
            'zemlya': '@comodmodmdfdfc',  # –ó–µ–º–µ–ª—å–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏
            'orenda': '@comodcv'  # –û—Ä–µ–Ω–¥–∞
        }
    
    def format_price(self, listing_data):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏"""
        price = listing_data.get('price')
        currency = listing_data.get('currency', 'UAH')
        
        if not price:
            return "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
        
        if currency == 'UAH':
            return f"üí∞ {price:,} –≥—Ä–Ω".replace(',', ' ')
        elif currency == 'USD':
            return f"üí∞ ${price:,}".replace(',', ' ')
        elif currency == 'EUR':
            return f"üí∞ ‚Ç¨{price:,}".replace(',', ' ')
        else:
            return f"üí∞ {price:,} {currency}".replace(',', ' ')
    
    def format_listing_message(self, listing_data):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram"""
        title = listing_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
        price = self.format_price(listing_data)
        phone = listing_data.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')
        location = listing_data.get('location', listing_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
        area = listing_data.get('area')
        floor = listing_data.get('floor')
        tags = listing_data.get('tags', [])
        url = listing_data.get('url', '')
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        message = f"üè† <b>{title}</b>\n\n"
        message += f"{price}\n"
        
        if phone and phone != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ':
            message += f"üìû {phone}\n"
        
        if location and location != '–ù–µ –≤–∫–∞–∑–∞–Ω–æ':
            message += f"üìç {location}\n"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        details = []
        if area:
            details.append(f"üìê {area} –º¬≤")
        if floor:
            details.append(f"üè¢ {floor} –ø–æ–≤–µ—Ä—Ö")
        
        if details:
            message += f"\n{' ‚Ä¢ '.join(details)}\n"
        
        # –¢–µ–≥–∏ (–ø–µ—Ä—à—ñ 3-4)
        if tags:
            relevant_tags = [tag for tag in tags[:4] if not any(x in tag.lower() for x in ['–ø—ñ–¥–Ω—è—Ç–∏', '—Ç–æ–ø', '–ø—Ä–∏–≤–∞—Ç–Ω–∞ –æ—Å–æ–±–∞'])]
            if relevant_tags:
                message += f"\nüè∑Ô∏è {' ‚Ä¢ '.join(relevant_tags)}\n"
        
        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è
        if url:
            message += f"\nüîó <a href='{url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è</a>"
        
        message += f"\n\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        return message
    
    async def send_to_channel(self, listing_data):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É"""
        try:
            property_type = listing_data.get('property_type', 'unknown')
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞–Ω–∞–ª
            channel_id = self.channels.get(property_type)
            if not channel_id:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {property_type}")
                return False
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text = self.format_listing_message(listing_data)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            images = listing_data.get('images', [])
            
            if images:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ —Ñ–æ—Ç–æ
                if len(images) == 1:
                    # –û–¥–Ω–µ —Ñ–æ—Ç–æ
                    await self.bot.send_photo(
                        chat_id=channel_id,
                        photo=images[0],
                        caption=message_text,
                        parse_mode='HTML'
                    )
                else:
                    # –ö—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ (–¥–æ 10)
                    media_group = []
                    for i, image_url in enumerate(images[:10]):
                        if i == 0:
                            # –ü–µ—Ä—à–µ —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                            media_group.append(
                                InputMediaPhoto(media=image_url, caption=message_text, parse_mode='HTML')
                            )
                        else:
                            # –Ü–Ω—à—ñ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
                            media_group.append(InputMediaPhoto(media=image_url))
                    
                    await self.bot.send_media_group(
                        chat_id=channel_id,
                        media=media_group
                    )
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ —Ñ–æ—Ç–æ
                await self.bot.send_message(
                    chat_id=channel_id,
                    text=message_text,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
            
            self.logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {channel_id}: {listing_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞"""
        try:
            session = await self.bot.get_session()
            await session.close()
        except:
            pass 