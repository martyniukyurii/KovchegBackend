import asyncio
import json
import os
import time
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–¥–∞—î–º–æ tools –¥–æ Python path –¥–ª—è –ª–æ–≥–µ—Ä–∞
sys.path.append(str(Path(__file__).parent.parent / "tools"))
from logger import Logger

from parsers.olx_parser import OLXParser
from parsers.m2bomber_parser import M2BomberParser

class PropertyParserManager:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.links_file = Path(__file__).parent / "links_data.json"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –≤ system
        self.results_dir = self.project_root / "parsed_results"
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥–µ—Ä
        self.logger = Logger()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        self.results_dir.mkdir(exist_ok=True)
        
        self.logger.info(f"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ PropertyParserManager")
        self.logger.info(f"–§–∞–π–ª –ø–æ—Å–∏–ª–∞–Ω—å: {self.links_file}")
        self.logger.info(f"–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {self.results_dir}")
        
    def load_links_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É –ø–æ—Å–∏–ª–∞–Ω—å"""
        try:
            with open(self.links_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –ø–æ—Å–∏–ª–∞–Ω—å –∑ —Ñ–∞–π–ª—É")
                return data
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –ø–æ—Å–∏–ª–∞–Ω—å: {e}")
            return []
            
    def save_results(self, results, parser_name):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥—É"""
        if not results:
            self.logger.warning(f"–ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–ª—è {parser_name}")
            return None
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{parser_name}_results_{timestamp}.json"
        filepath = self.results_dir / filename
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {filepath}")
            self.logger.info(f"–í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {len(results)} –æ–≥–æ–ª–æ—à–µ–Ω—å")
            return filepath
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: {e}")
            return None
            
    async def run_olx_parser(self):
        """–ó–∞–ø—É—Å–∫–∞—î–º–æ OLX –ø–∞—Ä—Å–µ—Ä"""
        self.logger.info("=" * 60)
        self.logger.info(f"–ó–∞–ø—É—Å–∫ OLX –ø–∞—Ä—Å–µ—Ä–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info("=" * 60)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        links_data = self.load_links_data()
        if not links_data:
            self.logger.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É")
            return []
            
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–∞—Ä—Å–µ—Ä
        parser = OLXParser()
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±—Ä–∞—É–∑–µ—Ä
            await parser.init_browser()
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥
            results = await parser.parse_all_olx_urls(links_data)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if results:
                self.save_results(results, "olx")
                self.print_parsing_summary(results)
            else:
                self.logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
                
            return results
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ OLX –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return []
        finally:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
            await parser.close_browser()
            
    def print_parsing_summary(self, results):
        """–í–∏–≤–æ–¥–∏–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –ø–∞—Ä—Å–∏–Ω–≥"""
        self.logger.info("\n" + "=" * 60)
        self.logger.info("–ó–í–Ü–¢ –ü–†–û –ü–ê–†–°–ò–ù–ì")
        self.logger.info("=" * 60)
        
        total = len(results)
        self.logger.info(f"–í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω—å: {total}")
        
        if total == 0:
            return
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
        property_types = {}
        prices = []
        with_phone = 0
        with_location = 0
        
        for result in results:
            # –¢–∏–ø–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            prop_type = result.get('property_type', 'unknown')
            property_types[prop_type] = property_types.get(prop_type, 0) + 1
            
            # –¶—ñ–Ω–∏
            if result.get('price'):
                prices.append(result['price'])
                
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ç–∞ –ª–æ–∫–∞—Ü—ñ–π
            if result.get('phone'):
                with_phone += 1
            if result.get('location'):
                with_location += 1
                
        self.logger.info(f"\n–ü–æ —Ç–∏–ø–∞—Ö –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:")
        for prop_type, count in property_types.items():
            self.logger.info(f"  {prop_type}: {count}")
            
        self.logger.info(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"  –ó –≤–∫–∞–∑–∞–Ω–æ—é —Ü—ñ–Ω–æ—é: {len(prices)} ({len(prices)/total*100:.1f}%)")
        self.logger.info(f"  –ó –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É: {with_phone} ({with_phone/total*100:.1f}%)")
        self.logger.info(f"  –ó –≤–∏–∑–Ω–∞—á–µ–Ω–æ—é –ª–æ–∫–∞—Ü—ñ—î—é: {with_location} ({with_location/total*100:.1f}%)")
        
        if prices:
            avg_price = sum(prices) / len(prices)
            min_price = min(prices)
            max_price = max(prices)
            self.logger.info(f"  –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: ${avg_price:,.0f}")
            self.logger.info(f"  –ú—ñ–Ω —Ü—ñ–Ω–∞: ${min_price:,.0f}")
            self.logger.info(f"  –ú–∞–∫—Å —Ü—ñ–Ω–∞: ${max_price:,.0f}")
            
        self.logger.info("=" * 60)
        
    async def run_m2bomber_parser(self):
        """–ó–∞–ø—É—Å–∫–∞—î–º–æ M2Bomber –ø–∞—Ä—Å–µ—Ä"""
        self.logger.info("=" * 60)
        self.logger.info(f"–ó–∞–ø—É—Å–∫ M2Bomber –ø–∞—Ä—Å–µ—Ä–∞ - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        self.logger.info("=" * 60)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        links_data = self.load_links_data()
        if not links_data:
            self.logger.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É")
            return []
            
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–∞—Ä—Å–µ—Ä
        parser = M2BomberParser()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–∏–Ω–≥
            results = await parser.parse_all_m2bomber_urls(links_data)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if results:
                self.save_results(results, "m2bomber")
                self.print_parsing_summary(results)
            else:
                self.logger.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
                
            return results
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ M2Bomber –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return []
        finally:
            # –ü–∞—Ä—Å–µ—Ä —Å–∞–º –∑–∞–∫—Ä–∏–≤–∞—î –±—Ä–∞—É–∑–µ—Ä
            pass
            
    async def run_single_cycle(self):
        """–í–∏–∫–æ–Ω—É—î–º–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥—É –≤—Å—ñ—Ö —Å–∞–π—Ç—ñ–≤"""
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ OLX –ø–∞—Ä—Å–µ—Ä
        olx_results = await self.run_olx_parser()
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ M2Bomber –ø–∞—Ä—Å–µ—Ä
        m2bomber_results = await self.run_m2bomber_parser()
        
        end_time = time.time()
        duration = end_time - start_time
        
        self.logger.info(f"\n–¶–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
        self.logger.info(f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω...")
        
        return {
            'olx_results': olx_results,
            'm2bomber_results': m2bomber_results,
            'duration': duration,
            'timestamp': datetime.now().isoformat()
        }
        
    async def run_continuous(self):
        """–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"""
        self.logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ")
        self.logger.info("–ü–∞—Ä—Å–µ—Ä–∏ –±—É–¥—É—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω")
        self.logger.info("–î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        self.logger.info("-" * 60)
        
        cycle_count = 0
        
        try:
            while True:
                cycle_count += 1
                self.logger.info(f"\nüîÑ –¶–ò–ö–õ #{cycle_count}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥—É
                await self.run_single_cycle()
                
                # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω (300 —Å–µ–∫—É–Ω–¥)
                await asyncio.sleep(300)
                
        except KeyboardInterrupt:
            self.logger.info("\n\n‚èπÔ∏è  –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É...")
            self.logger.info("–î—è–∫—É—é –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        except Exception as e:
            self.logger.error(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            self.logger.error("–°–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä (–ª–æ–≥–µ—Ä –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ __init__)
    manager = PropertyParserManager()
    
    if not manager.links_file.exists():
        manager.logger.error(f"‚ùå –§–∞–π–ª –ø–æ—Å–∏–ª–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {manager.links_file}")
        manager.logger.error("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –≤–∞–ª—ñ–¥–Ω–∏–π JSON")
        return
        
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å OpenAI –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        manager.logger.warning("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables")
        manager.logger.warning("–õ–æ–∫–∞—Ü—ñ—é –±—É–¥–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –±–µ–∑ OpenAI")
        
    manager.logger.info("‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∏—Å—Ç–µ–º—É
    await manager.run_continuous()

if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ event loop policy –¥–ª—è Windows —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if os.name == 'nt':  # Windows
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())
