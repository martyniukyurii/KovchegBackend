import os
import sys
import signal
import json
import asyncio
from datetime import datetime, time
from pathlib import Path
from typing import List, Dict

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è Python 3.9 –Ω–∞ macOS
if sys.platform == 'darwin' and sys.version_info[:2] == (3, 9):
    import asyncio
    import selectors
    
    # –ö–†–ò–¢–ò–ß–ù–ï: –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ child watcher –Ω–∞ macOS
    class NoOpChildWatcher:
        def add_child_handler(self, *args, **kwargs): pass
        def remove_child_handler(self, *args, **kwargs): pass
        def attach_loop(self, *args, **kwargs): pass
        def close(self): pass
        def is_active(self): return True
        def __enter__(self): return self
        def __exit__(self, *args): pass
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ selector event loop —ñ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ child watcher
    selector = selectors.SelectSelector()
    loop = asyncio.SelectorEventLoop(selector)
    asyncio.set_event_loop(loop)
    
    # –ü–∞—Ç—á –¥–ª—è child watcher
    original_get_child_watcher = asyncio.events.get_child_watcher
    def patched_get_child_watcher():
        return NoOpChildWatcher()
    asyncio.events.get_child_watcher = patched_get_child_watcher

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from system.parsers.olx_parser import OLXParser
from system.parsers.m2bomber_parser import M2BomberParser
from tools.logger import Logger
from tools.database import SyncDatabase

class PropertyParserManager:
    def __init__(self):
        self.logger = Logger()
        self.db = SyncDatabase()
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ TelegramBot –¥–∏–Ω–∞–º—ñ—á–Ω–æ
        from bot.telegram_bot import TelegramBot
        self.telegram_bot = TelegramBot()
        self.is_running = True
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É (–Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ 2:00 –¥–æ 7:00)
        self.quiet_start = time(2, 0)  # 2:00
        self.quiet_end = time(7, 0)    # 7:00
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω—å
        self.links_data = self.load_links_data()
        
        # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
    def signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
        self.logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        self.is_running = False
        
    def load_links_data(self) -> List[Dict]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω—å –∑ JSON —Ñ–∞–π–ª—É"""
        try:
            links_file = Path(__file__).parent / "links_data.json"
            with open(links_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            self.logger.info(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –ø–æ—Å–∏–ª–∞–Ω—å")
            return data
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å: {e}")
            return []
    
    def is_quiet_time(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—Ä–∞–∑ —Ç–∏—Ö–∏–π —á–∞—Å (2:00-7:00)"""
        current_time = datetime.now().time()
        return self.quiet_start <= current_time <= self.quiet_end
    
    async def run_olx_parser(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ OLX –ø–∞—Ä—Å–µ—Ä–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ OLX –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            parser = OLXParser()
            # –í–∏–¥–∞–ª—è—î–º–æ init_browser - —Ç–µ–ø–µ—Ä —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ parse_all_olx_urls
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ OLX –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            olx_links = [link for link in self.links_data if link.get('site') == 'OLX']
            
            results = await parser.parse_all_olx_urls(olx_links)
            
            # –í–∏–¥–∞–ª—è—î–º–æ close_browser - —Ç–µ–ø–µ—Ä —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Telegram –≤ –ø–∞—Ä—Å–µ—Ä—ñ
            
            return {
                'parser': 'OLX',
                'processed': len(results),
                'success': True,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OLX –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return {
                'parser': 'OLX',
                'processed': 0,
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def run_m2bomber_parser(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ M2Bomber –ø–∞—Ä—Å–µ—Ä–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ M2Bomber –ø–∞—Ä—Å–µ—Ä–∞...")
        
        try:
            parser = M2BomberParser()
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ M2BOMBER –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            m2bomber_links = [link for link in self.links_data if link.get('site') == 'M2BOMBER']
            
            results = await parser.parse_all_m2bomber_urls(m2bomber_links)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ Telegram –≤ –ø–∞—Ä—Å–µ—Ä—ñ
            
            return {
                'parser': 'M2BOMBER',
                'processed': len(results),
                'success': True,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ M2Bomber –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return {
                'parser': 'M2BOMBER',
                'processed': 0,
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    async def run_single_cycle(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª—É –ø–∞—Ä—Å–∏–Ω–≥—É"""
        cycle_start = datetime.now()
        self.logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ü–∏–∫–ª—É –ø–∞—Ä—Å–∏–Ω–≥—É: {cycle_start.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏—Ö–∏–π —á–∞—Å
        if self.is_quiet_time():
            self.logger.info("üò¥ –¢–∏—Ö–∏–π —á–∞—Å (2:00-7:00). –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª.")
            return {
                'cycle_start': cycle_start.isoformat(),
                'skipped': True,
                'reason': 'quiet_time',
                'duration': 0
            }
        
        results = []
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä—Å–µ—Ä–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        try:
            olx_task = asyncio.create_task(self.run_olx_parser())
            m2bomber_task = asyncio.create_task(self.run_m2bomber_parser())
            
            olx_result, m2bomber_result = await asyncio.gather(olx_task, m2bomber_task)
            
            results = [olx_result, m2bomber_result]
            
        except Exception as e:
            self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü–∏–∫–ª—É: {e}")
            results = []
        
        cycle_end = datetime.now()
        duration = (cycle_end - cycle_start).total_seconds()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_processed = sum(r.get('processed', 0) for r in results)
        successful_parsers = sum(1 for r in results if r.get('success', False))
        
        self.logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f}—Å. –û–±—Ä–æ–±–ª–µ–Ω–æ: {total_processed}, —É—Å–ø—ñ—à–Ω–∏—Ö –ø–∞—Ä—Å–µ—Ä—ñ–≤: {successful_parsers}/2")
        
        return {
            'cycle_start': cycle_start.isoformat(),
            'cycle_end': cycle_end.isoformat(),
            'duration': duration,
            'results': results,
            'total_processed': total_processed,
            'successful_parsers': successful_parsers,
            'skipped': False
        }
    
    async def run_continuous(self):
        """–ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä—ñ–≤ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ")
        self.logger.info(f"üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.links_data)} –ø–æ—Å–∏–ª–∞–Ω—å")
        self.logger.info("‚è∞ –ü–∞—Ä—Å–µ—Ä–∏ –±—É–¥—É—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω")
        self.logger.info("üò¥ –¢–∏—Ö–∏–π —á–∞—Å: 2:00-7:00 (–ø–∞—Ä—Å–µ—Ä–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å)")
        self.logger.info("üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
        
        cycle_count = 0
        
        while self.is_running:
            try:
                cycle_count += 1
                self.logger.info(f"üìä –¶–∏–∫–ª #{cycle_count}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω —Ü–∏–∫–ª
                cycle_result = await self.run_single_cycle()
                
                # –û—á—ñ–∫—É—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                if self.is_running:
                    self.logger.info("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 5 —Ö–≤–∏–ª–∏–Ω –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É...")
                    for i in range(300):  # 300 —Å–µ–∫—É–Ω–¥ = 5 —Ö–≤–∏–ª–∏–Ω
                        if not self.is_running:
                            break
                        await asyncio.sleep(1)
                
            except KeyboardInterrupt:
                self.logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
                self.is_running = False
            except Exception as e:
                self.logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                if self.is_running:
                    self.logger.info("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è 1 —Ö–≤–∏–ª–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                    await asyncio.sleep(60)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    manager = PropertyParserManager()
    await manager.run_continuous()

if __name__ == "__main__":
    asyncio.run(main())
