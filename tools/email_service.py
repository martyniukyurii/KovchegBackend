import os
import resend
from typing import Dict, Any, Optional
from tools.logger import Logger

logger = Logger()

class EmailService:
    def __init__(self):
        self.resend_api_key = os.getenv('RESEND_API_KEY')
        if not self.resend_api_key:
            logger.warning("RESEND_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        else:
            resend.api_key = self.resend_api_key
        
        # –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏
        self.supported_languages = ["uk", "ru", "en"]
        
        # –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è email
        self.translations = {
            "uk": {
                "verification_subject": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó - –í–∞—à –ö–æ–≤—á–µ–≥",
                "verification_title": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –í–∞—à –ö–æ–≤—á–µ–≥!",
                "verification_greeting": "–ü—Ä–∏–≤—ñ—Ç",
                "verification_thanks": "–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ —Å–∏—Å—Ç–µ–º—ñ –í–∞—à –ö–æ–≤—á–µ–≥. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É.",
                "verification_code_label": "–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:",
                "verification_instructions": "–í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –≤ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –∞–¥—Ä–µ—Å–∏.",
                "verification_expires": "–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.",
                "signature": "–ó –ø–æ–≤–∞–≥–æ—é,<br>–ö–æ–º–∞–Ω–¥–∞ –í–∞—à –ö–æ–≤—á–µ–≥",
                
                "reset_subject": "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é - –í–∞—à –ö–æ–≤—á–µ–≥",
                "reset_title": "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é",
                "reset_greeting": "–ü—Ä–∏–≤—ñ—Ç",
                "reset_message": "–í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –¥–ª—è –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É –≤ —Å–∏—Å—Ç–µ–º—ñ –í–∞—à –ö–æ–≤—á–µ–≥.",
                "reset_code_label": "–í–∞—à –∫–æ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é:",
                "reset_instructions": "–í–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥ –≤ –¥–æ–¥–∞—Ç–∫—É —Ä–∞–∑–æ–º –∑ –Ω–æ–≤–∏–º –ø–∞—Ä–æ–ª–µ–º.",
                "reset_warning": "‚ö†Ô∏è –£–≤–∞–≥–∞:",
                "reset_warning_text": "–ö–æ–¥ –¥—ñ–π—Å–Ω–∏–π –ª–∏—à–µ 1 –≥–æ–¥–∏–Ω—É. –Ø–∫—â–æ –≤–∏ –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é, –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ–π –ª–∏—Å—Ç.",
                
                "welcome_subject": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –í–∞—à –ö–æ–≤—á–µ–≥!",
                "welcome_title": "–í—ñ—Ç–∞—î–º–æ",
                "welcome_message": "–í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ!",
                "welcome_features": "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –í–∞—à –ö–æ–≤—á–µ–≥:",
                "feature_search": "üè† –ü–æ—à—É–∫ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ",
                "feature_admins": "üíº –†–æ–±–æ—Ç–∞ –∑ –∞–¥–º—ñ–Ω–∞–º–∏",
                "feature_analytics": "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ä–∏–Ω–∫—É",
                "feature_ai": "ü§ñ AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç",
                "welcome_wishes": "–ë–∞–∂–∞—î–º–æ –≤–∞–º —É—Å–ø—ñ—à–Ω–∏—Ö —É–≥–æ–¥!"
            },
            "ru": {
                "verification_subject": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –í–∞—à –ö–æ–≤—á–µ–≥",
                "verification_title": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∞—à –ö–æ–≤—á–µ–≥!",
                "verification_greeting": "–ü—Ä–∏–≤–µ—Ç",
                "verification_thanks": "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ –í–∞—à –ö–æ–≤—á–µ–≥. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.",
                "verification_code_label": "–í–∞—à –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                "verification_instructions": "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞.",
                "verification_expires": "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
                "signature": "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –í–∞—à –ö–æ–≤—á–µ–≥",
                
                "reset_subject": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - –í–∞—à –ö–æ–≤—á–µ–≥",
                "reset_title": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
                "reset_greeting": "–ü—Ä–∏–≤–µ—Ç",
                "reset_message": "–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –í–∞—à –ö–æ–≤—á–µ–≥.",
                "reset_code_label": "–í–∞—à –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:",
                "reset_instructions": "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.",
                "reset_warning": "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:",
                "reset_warning_text": "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ 1 —á–∞—Å. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.",
                
                "welcome_subject": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–∞—à –ö–æ–≤—á–µ–≥!",
                "welcome_title": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º",
                "welcome_message": "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!",
                "welcome_features": "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –í–∞—à –ö–æ–≤—á–µ–≥:",
                "feature_search": "üè† –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                "feature_admins": "üíº –†–∞–±–æ—Ç–∞ —Å –∞–¥–º—ñ–Ω–∞–º–∏",
                "feature_analytics": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞",
                "feature_ai": "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
                "welcome_wishes": "–ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!"
            },
            "en": {
                "verification_subject": "Registration Confirmation - –í–∞—à –ö–æ–≤—á–µ–≥",
                "verification_title": "Welcome to –í–∞—à –ö–æ–≤—á–µ–≥!",
                "verification_greeting": "Hello",
                "verification_thanks": "Thank you for registering with –í–∞—à –ö–æ–≤—á–µ–≥. To complete your registration, please verify your email address.",
                "verification_code_label": "Your verification code:",
                "verification_instructions": "Enter this code in the app to confirm your email address.",
                "verification_expires": "Code is valid for 24 hours.",
                "signature": "Best regards,<br>–í–∞—à –ö–æ–≤—á–µ–≥ Team",
                
                "reset_subject": "Password Reset - –í–∞—à –ö–æ–≤—á–µ–≥",
                "reset_title": "Password Reset",
                "reset_greeting": "Hello",
                "reset_message": "You requested a password reset for your –í–∞—à –ö–æ–≤—á–µ–≥ account.",
                "reset_code_label": "Your password reset code:",
                "reset_instructions": "Enter this code in the app along with your new password.",
                "reset_warning": "‚ö†Ô∏è Warning:",
                "reset_warning_text": "Code is valid for only 1 hour. If you did not request a password reset, please ignore this email.",
                
                "welcome_subject": "Welcome to –í–∞—à –ö–æ–≤—á–µ–≥!",
                "welcome_title": "Congratulations",
                "welcome_message": "Your account has been successfully created and verified!",
                "welcome_features": "Now you can use all the features of the –í–∞—à –ö–æ–≤—á–µ–≥ platform:",
                "feature_search": "üè† Property Search",
                "feature_admins": "üíº Work with Admins",
                "feature_analytics": "üìä Market Analytics",
                "feature_ai": "ü§ñ AI Assistant",
                "welcome_wishes": "We wish you successful deals!"
            }
        }
    
    def _get_language(self, language: str) -> str:
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ—ó –º–æ–≤–∏"""
        if language and language in self.supported_languages:
            return language
        return "uk"  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
    
    async def send_verification_email(self, email: str, verification_code: str, user_name: str = "", language: str = "uk") -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∑ –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        try:
            if not self.resend_api_key:
                logger.error("Resend API key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                return False
            
            lang = self._get_language(language)
            t = self.translations[lang]
            
            subject = t["verification_subject"]
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>{t["verification_title"]}</title>
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background-color: #4CAF50; color: white; padding: 20px; text-align: center; }}
                    .content {{ padding: 20px; background-color: #f9f9f9; }}
                    .code {{ background-color: #e8f5e8; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 18px; text-align: center; margin: 20px 0; }}
                    .footer {{ text-align: center; padding: 20px; color: #666; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>{t["verification_title"]}</h1>
                    </div>
                    <div class="content">
                        <p>{t["verification_greeting"]}{f", {user_name}" if user_name else ""}!</p>
                        <p>{t["verification_thanks"]}</p>
                        <p>{t["verification_code_label"]}</p>
                        <div class="code">{verification_code}</div>
                        <p>{t["verification_instructions"]}</p>
                        <p>{t["verification_expires"]}</p>
                    </div>
                    <div class="footer">
                        <p>{t["signature"]}</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            params = {
                "from": "–í–∞—à –ö–æ–≤—á–µ–≥ <noreply@mediamood.today>",
                "to": [email],
                "subject": subject,
                "html": html_content
            }
            
            email_response = resend.Emails.send(params)
            logger.info(f"Email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email} ({lang}): {email_response}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {str(e)}")
            return False
    
    async def send_password_reset_email(self, email: str, reset_code: str, user_name: str = "", language: str = "uk") -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ email –∑ –∫–æ–¥–æ–º –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é"""
        try:
            if not self.resend_api_key:
                logger.error("Resend API key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                return False
            
            lang = self._get_language(language)
            t = self.translations[lang]
            
            subject = t["reset_subject"]
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>{t["reset_title"]}</title>
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background-color: #ff9800; color: white; padding: 20px; text-align: center; }}
                    .content {{ padding: 20px; background-color: #f9f9f9; }}
                    .code {{ background-color: #fff3e0; padding: 15px; border-radius: 5px; font-family: monospace; font-size: 18px; text-align: center; margin: 20px 0; }}
                    .footer {{ text-align: center; padding: 20px; color: #666; }}
                    .warning {{ background-color: #ffebee; padding: 10px; border-radius: 5px; margin: 10px 0; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>{t["reset_title"]}</h1>
                    </div>
                    <div class="content">
                        <p>{t["reset_greeting"]}{f", {user_name}" if user_name else ""}!</p>
                        <p>{t["reset_message"]}</p>
                        <p>{t["reset_code_label"]}</p>
                        <div class="code">{reset_code}</div>
                        <p>{t["reset_instructions"]}</p>
                        <div class="warning">
                            <strong>{t["reset_warning"]}</strong> {t["reset_warning_text"]}
                        </div>
                    </div>
                    <div class="footer">
                        <p>{t["signature"]}</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            params = {
                "from": "–í–∞—à –ö–æ–≤—á–µ–≥ <noreply@mediamood.today>",
                "to": [email],
                "subject": subject,
                "html": html_content
            }
            
            email_response = resend.Emails.send(params)
            logger.info(f"Email –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email} ({lang}): {email_response}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é: {str(e)}")
            return False
    
    async def send_welcome_email(self, email: str, user_name: str, language: str = "uk") -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ email –ø—ñ—Å–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"""
        try:
            if not self.resend_api_key:
                logger.error("Resend API key –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                return False
            
            lang = self._get_language(language)
            t = self.translations[lang]
            
            subject = t["welcome_subject"]
            html_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>{t["welcome_title"]}</title>
                <style>
                    body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                    .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background-color: #4CAF50; color: white; padding: 20px; text-align: center; }}
                    .content {{ padding: 20px; background-color: #f9f9f9; }}
                    .footer {{ text-align: center; padding: 20px; color: #666; }}
                    .feature {{ background-color: #e8f5e8; padding: 10px; margin: 10px 0; border-radius: 5px; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>{t["welcome_title"]}, {user_name}!</h1>
                    </div>
                    <div class="content">
                        <p>{t["welcome_message"]}</p>
                        <p>{t["welcome_features"]}</p>
                        <div class="feature">{t["feature_search"]}</div>
                        <div class="feature">{t["feature_admins"]}</div>
                        <div class="feature">{t["feature_analytics"]}</div>
                        <div class="feature">{t["feature_ai"]}</div>
                        <p>{t["welcome_wishes"]}</p>
                    </div>
                    <div class="footer">
                        <p>{t["signature"]}</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            params = {
                "from": "–í–∞—à –ö–æ–≤—á–µ–≥ <noreply@mediamood.today>",
                "to": [email],
                "subject": subject,
                "html": html_content
            }
            
            email_response = resend.Emails.send(params)
            logger.info(f"–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email} ({lang}): {email_response}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ email: {str(e)}")
            return False 