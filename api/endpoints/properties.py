from fastapi import Depends, HTTPException, status, Request, Query
from typing import Dict, Any, Optional, List
from api.response import Response
from api.exceptions.auth_exceptions import AuthException, AuthErrorCode
from tools.database import Database
from tools.event_logger import EventLogger
from tools.embedding_service import EmbeddingService
from datetime import datetime
from api.jwt_handler import JWTHandler
import uuid
from api.endpoints.users import convert_objectid
from bson import ObjectId


class PropertiesEndpoints:
    def __init__(self):
        self.db = Database()
        self.jwt_handler = JWTHandler()

    async def get_top_offers(self, limit: int = Query(10, ge=1, le=50)) -> Dict[str, Any]:
        """
        üåç –ü–£–ë–õ–Ü–ß–ù–ò–ô ENDPOINT: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø–æ–≤—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–ø–æ–¥–æ–±–∞–Ω—å.
        
        –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–æ–∫–∞–∑—É—î –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –æ–±'—î–∫—Ç–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:
        - limit: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ (1-50, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)
        
        –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:
        GET /properties/top?limit=5
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "properties": [
                    {
                        "_id": "507f1f77bcf86cd799439011",
                        "title": "–ï–ª—ñ—Ç–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ",
                        "property_type": "apartment",
                        "transaction_type": "sale",
                        "price": 250000,
                        "area": 120,
                        "rooms": 3,
                        "location": {
                            "city": "–ö–∏—ó–≤",
                            "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1"
                        },
                        "likes_count": 15
                    }
                ]
            }
        }
        """
        try:
            # –ê–≥—Ä–µ–≥–∞—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ª–∞–π–∫—ñ–≤ —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
            pipeline = [
                # –¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –æ–±'—î–∫—Ç–∏
                {"$match": {"status": "active"}},
                
                # Lookup –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ª–∞–π–∫—ñ–≤
                {"$lookup": {
                    "from": "property_likes",
                    "let": {"property_id": {"$toString": "$_id"}},
                    "pipeline": [
                        {"$match": {"$expr": {"$eq": ["$property_id", "$$property_id"]}}}
                    ],
                    "as": "likes"
                }},
                
                # –î–æ–¥–∞—Ç–∏ –ø–æ–ª–µ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–π–∫—ñ–≤
                {"$addFields": {
                    "likes_count": {"$size": "$likes"}
                }},
                
                # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–π–∫—ñ–≤ (—Å–ø–∞–¥–∞—é—á–µ), –ø–æ—Ç—ñ–º –∑–∞ –¥–∞—Ç–æ—é
                {"$sort": {
                    "likes_count": -1,
                    "created_at": -1
                }},
                
                # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                {"$limit": limit},
                
                # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ likes (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ likes_count)
                {"$project": {
                    "likes": 0
                }}
            ]
            
            properties = await self.db.properties.aggregate(pipeline)
            properties = convert_objectid(properties)
            
            return Response.success({"properties": properties})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–ø–æ–≤–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def search_buy(
        self,
        city: Optional[str] = Query(None, description="–ú—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –õ—å–≤—ñ–≤)"),
        property_type: Optional[str] = Query(None, description="–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: apartment, house, commercial, land"),
        min_price: Optional[float] = Query(None, description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê"),
        max_price: Optional[float] = Query(None, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê"),
        min_area: Optional[float] = Query(None, description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –≤ –∫–≤.–º"),
        max_area: Optional[float] = Query(None, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –≤ –∫–≤.–º"),
        rooms: Optional[int] = Query(None, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç"),
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏"),
        limit: int = Query(10, ge=1, le=50, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
    ) -> Dict[str, Any]:
        """
        üåç –ü–£–ë–õ–Ü–ß–ù–ò–ô ENDPOINT: –ü–æ—à—É–∫ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ.
        
        –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–æ–∫–∞–∑—É—î –æ–±'—î–∫—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É (–≤—Å—ñ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ):
        - city: –º—ñ—Å—Ç–æ –ø–æ—à—É–∫—É
        - property_type: —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (apartment, house, commercial, land)
        - min_price, max_price: –¥—ñ–∞–ø–∞–∑–æ–Ω —Ü—ñ–Ω –≤ USD
        - min_area, max_area: –¥—ñ–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â—ñ –≤ –∫–≤.–º
        - rooms: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç
        - page: –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1)
        - limit: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ (1-50, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10)
        
        –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:
        GET /properties/buy?city=–ö–∏—ó–≤&property_type=apartment&min_price=50000&max_price=200000&rooms=2
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "properties": [...],
                "pagination": {
                    "page": 1,
                    "limit": 10,
                    "total": 45,
                    "pages": 5
                }
            }
        }
        """
        try:
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É
            filters = {"transaction_type": "sale", "status": "active"}
            
            if city:
                filters["location.city"] = {"$regex": city, "$options": "i"}
            if property_type:
                filters["property_type"] = property_type
            if min_price is not None:
                filters.setdefault("price", {})["$gte"] = min_price
            if max_price is not None:
                filters.setdefault("price", {})["$lte"] = max_price
            if min_area is not None:
                filters.setdefault("area", {})["$gte"] = min_area
            if max_area is not None:
                filters.setdefault("area", {})["$lte"] = max_area
            if rooms is not None:
                filters["rooms"] = rooms
            
            # –ü–æ—à—É–∫ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –Ω–æ–≤—ñ—à–∏—Ö –¥–æ —Å—Ç–∞—Ä—à–∏—Ö
            skip = (page - 1) * limit
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≥—Ä–µ–≥–∞—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–π–∫—ñ–≤
            pipeline = [
                {"$match": filters},
                
                # Lookup –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ª–∞–π–∫—ñ–≤
                {"$lookup": {
                    "from": "property_likes",
                    "let": {"property_id": {"$toString": "$_id"}},
                    "pipeline": [
                        {"$match": {"$expr": {"$eq": ["$property_id", "$$property_id"]}}}
                    ],
                    "as": "likes"
                }},
                
                # –î–æ–¥–∞—Ç–∏ –ø–æ–ª–µ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–π–∫—ñ–≤
                {"$addFields": {
                    "likes_count": {"$size": "$likes"}
                }},
                
                # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                {"$sort": {"created_at": -1}},
                
                # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
                {"$skip": skip},
                {"$limit": limit},
                
                # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ likes
                {"$project": {"likes": 0}}
            ]
            
            properties = await self.db.properties.aggregate(pipeline)
            properties = convert_objectid(properties)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            total = await self.db.properties.count_documents(filters)
            
            return Response.success({
                "properties": properties,
                "pagination": {
                    "page": page,
                    "limit": limit,
                    "total": total,
                    "pages": (total + limit - 1) // limit
                }
            })
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def search_rent(
        self,
        city: Optional[str] = Query(None, description="–ú—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É"),
        property_type: Optional[str] = Query(None, description="–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: apartment, house, commercial"),
        min_price: Optional[float] = Query(None, description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –æ—Ä–µ–Ω–¥–∏ –≤ USD/–º—ñ—Å—è—Ü—å"),
        max_price: Optional[float] = Query(None, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ –æ—Ä–µ–Ω–¥–∏ –≤ USD/–º—ñ—Å—è—Ü—å"),
        min_area: Optional[float] = Query(None, description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –≤ –∫–≤.–º"),
        max_area: Optional[float] = Query(None, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –≤ –∫–≤.–º"),
        rooms: Optional[int] = Query(None, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç"),
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏"),
        limit: int = Query(10, ge=1, le=50, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
    ) -> Dict[str, Any]:
        """
        üåç –ü–£–ë–õ–Ü–ß–ù–ò–ô ENDPOINT: –ü–æ—à—É–∫ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –¥–ª—è –æ—Ä–µ–Ω–¥–∏.
        
        –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–æ–∫–∞–∑—É—î –æ–±'—î–∫—Ç–∏ –≤ –æ—Ä–µ–Ω–¥—É –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –¥–æ –ø–æ—à—É–∫—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ, –∞–ª–µ —Ü—ñ–Ω–∏ –≤–∫–∞–∑—É—é—Ç—å—Å—è –∑–∞ –º—ñ—Å—è—Ü—å.
        
        –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É:
        GET /properties/rent?city=–õ—å–≤—ñ–≤&property_type=apartment&min_price=300&max_price=800&rooms=1
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –¥–æ search_buy
        """
        try:
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –æ—Ä–µ–Ω–¥–∏
            filters = {"transaction_type": "rent", "status": "active"}
            
            if city:
                filters["location.city"] = {"$regex": city, "$options": "i"}
            if property_type:
                filters["property_type"] = property_type
            if min_price is not None:
                filters.setdefault("price", {})["$gte"] = min_price
            if max_price is not None:
                filters.setdefault("price", {})["$lte"] = max_price
            if min_area is not None:
                filters.setdefault("area", {})["$gte"] = min_area
            if max_area is not None:
                filters.setdefault("area", {})["$lte"] = max_area
            if rooms is not None:
                filters["rooms"] = rooms
            
            # –ü–æ—à—É–∫ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –Ω–æ–≤—ñ—à–∏—Ö –¥–æ —Å—Ç–∞—Ä—à–∏—Ö
            skip = (page - 1) * limit
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≥—Ä–µ–≥–∞—Ü—ñ—é –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª–∞–π–∫—ñ–≤
            pipeline = [
                {"$match": filters},
                
                # Lookup –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ª–∞–π–∫—ñ–≤
                {"$lookup": {
                    "from": "property_likes",
                    "let": {"property_id": {"$toString": "$_id"}},
                    "pipeline": [
                        {"$match": {"$expr": {"$eq": ["$property_id", "$$property_id"]}}}
                    ],
                    "as": "likes"
                }},
                
                # –î–æ–¥–∞—Ç–∏ –ø–æ–ª–µ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–π–∫—ñ–≤
                {"$addFields": {
                    "likes_count": {"$size": "$likes"}
                }},
                
                # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                {"$sort": {"created_at": -1}},
                
                # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è
                {"$skip": skip},
                {"$limit": limit},
                
                # –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ª–µ likes
                {"$project": {"likes": 0}}
            ]
            
            properties = await self.db.properties.aggregate(pipeline)
            properties = convert_objectid(properties)
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
            total = await self.db.properties.count_documents(filters)
            
            return Response.success({
                "properties": properties,
                "pagination": {
                    "page": page,
                    "limit": limit,
                    "total": total,
                    "pages": (total + limit - 1) // limit
                }
            })
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –¥–ª—è –æ—Ä–µ–Ω–¥–∏: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def submit_sell_request(self, request: Request) -> Dict[str, Any]:
        """
        üåç –ü–£–ë–õ–Ü–ß–ù–ò–ô ENDPOINT: –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.
        
        –î–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–¥–∞—é—Ç—å –∑–∞—è–≤–∫–∏, —è–∫—ñ —Ä–æ–∑–≥–ª—è–¥–∞—é—Ç—å –∞–≥–µ–Ω—Ç–∏.
        
        –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É (JSON):
        {
            "contact_name": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",         // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "contact_phone": "+380501234567",        // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "contact_email": "ivan@example.com",     // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "property_type": "apartment",            // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (apartment, house, commercial, land)
            "city": "–ö–∏—ó–≤",                         // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1",          // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "description": "–û–ø–∏—Å –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ",      // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "price": 150000,                        // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "area": 85,                             // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "rooms": 3                              // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
        }
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "message": "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞",
                "request_id": "507f1f77bcf86cd799439011"
            }
        }
        """
        try:
            data = await request.json()
            
            # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            required_fields = ["contact_name", "contact_phone", "property_type", "city", "address"]
            for field in required_fields:
                if not data.get(field):
                    return Response.error(f"–ü–æ–ª–µ '{field}' —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º", status_code=status.HTTP_400_BAD_REQUEST)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏
            sell_request = {
                "contact_name": data["contact_name"],
                "contact_phone": data["contact_phone"],
                "contact_email": data.get("contact_email", ""),
                "property_type": data["property_type"],
                "city": data["city"],
                "address": data["address"],
                "description": data.get("description", ""),
                "price": data.get("price"),
                "area": data.get("area"),
                "rooms": data.get("rooms"),
                "status": "pending",
                "created_at": datetime.utcnow()
            }
            
            request_id = await self.db.docs_sell_requests.create(sell_request)
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
            event_logger = EventLogger()
            await event_logger.log_custom_event(
                event_type="sell_request_submitted",
                description=f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂ –≤—ñ–¥ {data['contact_name']}",
                metadata={"request_id": request_id}
            )
            
            return Response.success({
                "message": "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞",
                "request_id": request_id
            })
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def get_my_properties(self, request: Request) -> Dict[str, Any]:
        """
        üîí –ê–î–ú–Ü–ù–°–¨–ö–ò–ô ENDPOINT: –û—Ç—Ä–∏–º–∞—Ç–∏ –º–æ—ó –æ–±'—î–∫—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –ü–æ–∫–∞–∑—É—î –æ–±'—î–∫—Ç–∏, —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø–æ—Ç–æ—á–Ω–∏–º –∞–≥–µ–Ω—Ç–æ–º/–∞–¥–º—ñ–Ω–æ–º.
        
        –ó–∞–≥–æ–ª–æ–≤–∫–∏:
        Authorization: Bearer <jwt_token>
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "properties": [
                    {
                        "_id": "507f1f77bcf86cd799439011",
                        "title": "–ú–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞",
                        "property_type": "apartment",
                        "transaction_type": "rent",
                        "price": 12000,
                        "area": 65,
                        "rooms": 2,
                        "location": {
                            "city": "–ö–∏—ó–≤",
                            "address": "–≤—É–ª. –°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 25"
                        },
                        "status": "active",
                        "owner_id": "687619cebc3697db0a23b3b3"
                    }
                ]
            }
        }
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            properties = await self.db.properties.find({"owner_id": user_id})
            properties = convert_objectid(properties)
            
            return Response.success({"properties": properties})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–æ—ó—Ö –æ–±'—î–∫—Ç—ñ–≤: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def create_property(self, request: Request) -> Dict[str, Any]:
        """
        üîí –ê–î–ú–Ü–ù–°–¨–ö–ò–ô ENDPOINT: –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç—ñ–≤/–∞–¥–º—ñ–Ω—ñ–≤. –ó–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–¥–∞—é—Ç—å –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ /properties/sell
        
        –ó–∞–≥–æ–ª–æ–≤–∫–∏:
        Authorization: Bearer <jwt_token>
        Content-Type: application/json
        
        –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É (JSON):
        {
            "title": "–ù–∞–∑–≤–∞ –æ–±'—î–∫—Ç–∞",                    // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "description": "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å",             // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "property_type": "apartment",                // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (apartment, house, commercial, land)
            "transaction_type": "rent",                  // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (rent, sale)
            "price": 12000,                             // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (USD –∞–±–æ USD/–º—ñ—Å—è—Ü—å)
            "area": 65,                                 // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ (–∫–≤.–º)
            "rooms": 2,                                 // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "city": "–ö–∏—ó–≤",                             // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "address": "–≤—É–ª. –°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 25",       // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ
            "coordinates": {                            // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
                "lat": 50.4378,
                "lon": 30.5201
            },
            "features": ["–±–∞–ª–∫–æ–Ω", "—Ä–µ–º–æ–Ω—Ç", "–º–µ–±–ª—ñ"],   // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
            "images": ["url1.jpg", "url2.jpg"]          // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
        }
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "message": "–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                "property_id": "507f1f77bcf86cd799439011"
            }
        }
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            data = await request.json()
            
            # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
            required_fields = ["title", "property_type", "transaction_type", "price", "area", "city", "address"]
            for field in required_fields:
                if not data.get(field):
                    return Response.error(f"–ü–æ–ª–µ '{field}' —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º", status_code=status.HTTP_400_BAD_REQUEST)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            property_data = {
                "title": data["title"],
                "description": data.get("description", ""),
                "property_type": data["property_type"],
                "transaction_type": data["transaction_type"],
                "price": data["price"],
                "area": data["area"],
                "rooms": data.get("rooms"),
                "location": {
                    "city": data["city"],
                    "address": data["address"],
                    "coordinates": data.get("coordinates", {})
                },
                "features": data.get("features", []),
                "images": data.get("images", []),
                "owner_id": user_id,
                "status": "active",
                "is_featured": False,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            }
            
            property_id = await self.db.properties.create(property_data)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–Ω–∏–π –µ–º–±–µ–¥–∏–Ω–≥ –¥–ª—è –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            if property_id:
                try:
                    embedding_service = EmbeddingService()
                    embedding = await embedding_service.create_property_embedding(property_data)
                    if embedding:
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ property_id –≤ ObjectId –¥–ª—è –ø–æ—à—É–∫—É
                        search_id = ObjectId(property_id) if isinstance(property_id, str) else property_id
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –µ–º–±–µ–¥–∏–Ω–≥–æ–º
                        await self.db.properties.update(
                            {"_id": search_id},
                            {"vector_embedding": embedding}
                        )
                except Exception as embedding_error:
                    # –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –µ–º–±–µ–¥–∏–Ω–≥—É
                    pass
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
            event_logger = EventLogger({"_id": user_id})
            await event_logger.log_custom_event(
                event_type="property_created",
                description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {data['title']}",
                metadata={"property_id": property_id}
            )
            
            return Response.success({
                "message": "–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ",
                "property_id": property_id
            })
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def get_property(self, property_id: str) -> Dict[str, Any]:
        """
        üîí –ê–î–ú–Ü–ù–°–¨–ö–ò–ô ENDPOINT: –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –∑–∞ ID.
        
        –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞–º–∏/–∞–¥–º—ñ–Ω–∞–º–∏.
        """
        try:
            try:
                property_obj = await self.db.properties.find_one({"_id": ObjectId(property_id)})
            except Exception:
                property_obj = await self.db.properties.find_one({"_id": property_id})
            
            if not property_obj:
                return Response.error("–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", status_code=status.HTTP_404_NOT_FOUND)
            
            property_obj = convert_objectid(property_obj)
            return Response.success({"property": property_obj})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def update_property(self, property_id: str, request: Request) -> Dict[str, Any]:
        """
        üîí –ê–î–ú–Ü–ù–°–¨–ö–ò–ô ENDPOINT: –û–Ω–æ–≤–∏—Ç–∏ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –æ–±'—î–∫—Ç–∞ –º–æ–∂–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏.
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            try:
                property_obj = await self.db.properties.find_one({"_id": ObjectId(property_id)})
            except Exception:
                property_obj = await self.db.properties.find_one({"_id": property_id})
            
            if not property_obj:
                raise AuthException(AuthErrorCode.PROPERTY_NOT_FOUND)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ
            if str(property_obj["owner_id"]) != str(user_id):
                return Response.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó", status_code=status.HTTP_403_FORBIDDEN)
            
            data = await request.json()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            update_data = {
                "updated_at": datetime.utcnow()
            }
            
            # –ü–æ–ª—è, —è–∫—ñ –º–æ–∂–Ω–∞ –æ–Ω–æ–≤–∏—Ç–∏
            updatable_fields = ["title", "description", "price", "area", "rooms", "features", "images", "status", "is_featured"]
            for field in updatable_fields:
                if field in data:
                    update_data[field] = data[field]
            
            if "location" in data:
                update_data["location"] = data["location"]
            
            await self.db.properties.update({"_id": property_obj["_id"]}, update_data)
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
            event_logger = EventLogger({"_id": user_id})
            await event_logger.log_custom_event(
                event_type="property_updated",
                description=f"–û–Ω–æ–≤–ª–µ–Ω–æ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {property_id}",
                metadata={"property_id": property_id}
            )
            
            return Response.success({"message": "–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"})
            
        except AuthException as e:
            return Response.error(
                message=e.detail["detail"],
                status_code=e.status_code,
                details={"code": e.detail["code"]}
            )
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def delete_property(self, property_id: str, request: Request) -> Dict[str, Any]:
        """
        üîí –ê–î–ú–Ü–ù–°–¨–ö–ò–ô ENDPOINT: –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –æ–±'—î–∫—Ç–∞ –º–æ–∂–µ –π–æ–≥–æ –≤–∏–¥–∞–ª–∏—Ç–∏.
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            try:
                property_obj = await self.db.properties.find_one({"_id": ObjectId(property_id)})
            except Exception:
                property_obj = await self.db.properties.find_one({"_id": property_id})
            
            if not property_obj:
                raise AuthException(AuthErrorCode.PROPERTY_NOT_FOUND)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ
            if str(property_obj["owner_id"]) != str(user_id):
                return Response.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó", status_code=status.HTTP_403_FORBIDDEN)
            
            await self.db.properties.delete({"_id": property_obj["_id"]})
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
            event_logger = EventLogger({"_id": user_id})
            await event_logger.log_custom_event(
                event_type="property_deleted",
                description=f"–í–∏–¥–∞–ª–µ–Ω–æ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {property_id}",
                metadata={"property_id": property_id}
            )
            
            return Response.success({"message": "–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"})
            
        except AuthException as e:
            return Response.error(
                message=e.detail["detail"],
                status_code=e.status_code,
                details={"code": e.detail["code"]}
            )
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∞ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def add_to_favorites(self, property_id: str, request: Request) -> Dict[str, Any]:
        """
        üë§ –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ò–ô ENDPOINT: –î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç –¥–æ –æ–±—Ä–∞–Ω–∏—Ö (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –¥–æ–¥–∞–≤–∞—Ç–∏ –æ–±'—î–∫—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö.
        –°—Ç–≤–æ—Ä—é—î –∑–∞–ø–∏—Å —É –∫–æ–ª–µ–∫—Ü—ñ—ó property_likes –∑ user_id —Ç–∞ property_id.
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "message": "–û–±'—î–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö"
            }
        }
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞
            try:
                property_obj = await self.db.properties.find_one({"_id": ObjectId(property_id)})
            except Exception:
                property_obj = await self.db.properties.find_one({"_id": property_id})
            
            if not property_obj:
                return Response.error("–û–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", status_code=status.HTTP_404_NOT_FOUND)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∂–µ —î –ª–∞–π–∫ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            existing_like = await self.db.property_likes.find_one({
                "user_id": user_id,
                "property_id": str(property_obj["_id"])
            })
            
            if existing_like:
                return Response.error("–û–±'—î–∫—Ç –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö", status_code=status.HTTP_409_CONFLICT)
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –ª–∞–π–∫–∞
            like_data = {
                "user_id": user_id,
                "property_id": str(property_obj["_id"]),
                "created_at": datetime.utcnow()
            }
            
            await self.db.property_likes.create(like_data)
            
            return Response.success({"message": "–û–±'—î–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö"})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def remove_from_favorites(self, property_id: str, request: Request) -> Dict[str, Any]:
        """
        üë§ –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ò–ô ENDPOINT: –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±'—î–∫—Ç –∑ –æ–±—Ä–∞–Ω–∏—Ö (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –≤–∏–¥–∞–ª—è—Ç–∏ –æ–±'—î–∫—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö.
        –í–∏–¥–∞–ª—è—î –∑–∞–ø–∏—Å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó property_likes.
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ª–∞–π–∫–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
            result = await self.db.property_likes.delete({
                "user_id": user_id,
                "property_id": property_id
            })
            
            if result == 0:  # –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ
                return Response.error("–û–±'—î–∫—Ç –Ω–µ –±—É–≤ —É –æ–±—Ä–∞–Ω–∏—Ö", status_code=status.HTTP_404_NOT_FOUND)
            
            return Response.success({"message": "–û–±'—î–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –æ–±—Ä–∞–Ω–∏—Ö"})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑ –æ–±—Ä–∞–Ω–∏—Ö: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

    async def get_favorites(self, request: Request) -> Dict[str, Any]:
        """
        üë§ –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ò–ô ENDPOINT: –û—Ç—Ä–∏–º–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ –æ–±'—î–∫—Ç–∏ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó).
        
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó property_likes –∑ –ø–æ–≤–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –æ–±'—î–∫—Ç–∏.
        
        –ü—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        {
            "status": "success",
            "data": {
                "favorites": [
                    {
                        "_id": "507f1f77bcf86cd799439011",
                        "title": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä—ñ",
                        "property_type": "apartment",
                        "price": 150000,
                        "area": 80,
                        "location": {
                            "city": "–ö–∏—ó–≤",
                            "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 1"
                        },
                        "liked_at": "2025-07-15T10:30:00Z"
                    }
                ]
            }
        }
        """
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞
            auth_header = request.headers.get("Authorization", "")
            if not auth_header.startswith("Bearer "):
                return Response.error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π", status_code=status.HTTP_401_UNAUTHORIZED)
            
            token = auth_header.split(" ")[1]
            payload = self.jwt_handler.decode_token(token)
            user_id = payload.get("sub")
            
            if not user_id:
                return Response.error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω", status_code=status.HTTP_401_UNAUTHORIZED)
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–≥—Ä–µ–≥–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
            pipeline = [
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ª–∞–π–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                {"$match": {"user_id": user_id}},
                
                # Lookup –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å
                {"$lookup": {
                    "from": "properties",
                    "let": {"property_id": {"$toObjectId": "$property_id"}},
                    "pipeline": [
                        {"$match": {"$expr": {"$eq": ["$_id", "$$property_id"]}}}
                    ],
                    "as": "property"
                }},
                
                # –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –º–∞—Å–∏–≤ property
                {"$unwind": "$property"},
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –æ–±'—î–∫—Ç –∞–∫—Ç–∏–≤–Ω–∏–π
                {"$match": {"property.status": "active"}},
                
                # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –ª–∞–π–∫–∞
                {"$addFields": {
                    "property.liked_at": "$created_at"
                }},
                
                # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é –ª–∞–π–∫–∞ (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
                {"$sort": {"created_at": -1}},
                
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–±'—î–∫—Ç –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
                {"$replaceRoot": {"newRoot": "$property"}}
            ]
            
            favorites = await self.db.property_likes.aggregate(pipeline)
            favorites = convert_objectid(favorites)
            
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
            if not favorites:
                favorites = []
            
            return Response.success({"favorites": favorites})
            
        except Exception as e:
            return Response.error(
                message=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±—Ä–∞–Ω–∏—Ö –æ–±'—î–∫—Ç—ñ–≤: {str(e)}",
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

 