"""
–§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î —â–æ–¥–µ–Ω–Ω—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤ —Ç–∞ –æ—á–∏—â—É—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ.
"""

import asyncio
from datetime import datetime
from typing import Optional
from tools.logger import Logger


class BackgroundTasksManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞."""
    
    def __init__(self):
        self.logger = Logger()
        self.is_running = False
        self.task = None
        self.ai_assistant = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á."""
        if self.is_running:
            self.logger.warning("‚ö†Ô∏è –§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω—ñ")
            return
            
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ç—É—Ç —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
        from api.endpoints.ai_assistant import AIAssistantEndpoints
        self.ai_assistant = AIAssistantEndpoints()
        
        self.is_running = True
        self.task = asyncio.create_task(self._background_scheduler())
        self.logger.info("üöÄ –§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –∑–∞–ø—É—â–µ–Ω–æ")
        
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á."""
        if not self.is_running:
            return
            
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
                
        self.logger.info("üî¥ –§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –∑—É–ø–∏–Ω–µ–Ω–æ")
        
    async def _background_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á."""
        self.logger.info("üìÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ")
        
        last_cleanup_day = None
        last_generation_day = None
        
        while self.is_running:
            try:
                now = datetime.now()
                current_date = now.date()
                current_time = now.time()
                
                # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á —â–æ–¥–Ω—è –æ 6:00 (—Ç—ñ–ª—å–∫–∏ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å)
                if (current_time.hour == 6 and current_time.minute == 0 and 
                    last_generation_day != current_date):
                    
                    await self._generate_daily_tasks()
                    last_generation_day = current_date
                    
                    # –û—á—ñ–∫—É—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É —â–æ–± –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –¥–≤—ñ—á—ñ
                    await asyncio.sleep(60)
                    continue
                
                # –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á —â–æ–¥–Ω—è –æ 2:00 (—Ç—ñ–ª—å–∫–∏ —Ä–∞–∑ –Ω–∞ –¥–µ–Ω—å)
                elif (current_time.hour == 2 and current_time.minute == 0 and 
                      last_cleanup_day != current_date):
                    
                    await self._cleanup_expired_tasks()
                    last_cleanup_day = current_date
                    
                    # –û—á—ñ–∫—É—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É —â–æ–± –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –¥–≤—ñ—á—ñ
                    await asyncio.sleep(60)
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                self.logger.info("üìÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫—É: {e}")
                await asyncio.sleep(60)
                
    async def _generate_daily_tasks(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ–≤."""
        self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —â–æ–¥–µ–Ω–Ω–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ–≤")
        
        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥ –Ω–∞–ø—Ä—è–º—É (–±–µ–∑ HTTP Request)
            from api.endpoints.ai_assistant import AIAssistantEndpoints
            from datetime import datetime
            
            target_date = datetime.utcnow().date()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ–≤
            admins = await self.ai_assistant.db.admins.find({"status": {"$ne": "inactive"}, "role": "admin"})
            
            results = {
                "date": target_date.isoformat(),
                "total_admins": len(admins),
                "successful": 0,
                "failed": 0,
                "results": []
            }

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞
            for admin in admins:
                admin_id = str(admin["_id"])
                try:
                    # –û–±—Ä–æ–±–ª—è—î–º–æ JSONResponse —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                    task_result = await self.ai_assistant.generate_daily_tasks_for_admin(
                        admin_id, target_date, force_regenerate=False
                    )
                    
                    # –Ø–∫—â–æ —Ü–µ JSONResponse, –ø–∞—Ä—Å–∏–º–æ –π–æ–≥–æ
                    if hasattr(task_result, 'body'):
                        import json
                        body = task_result.body.decode() if isinstance(task_result.body, bytes) else str(task_result.body)
                        task_result = json.loads(body)
                    
                    if isinstance(task_result, dict) and task_result.get("status") == "success":
                        results["successful"] += 1
                        results["results"].append({
                            "admin_id": admin_id,
                            "status": "success",
                            "tasks_count": len(task_result["data"]["tasks"]) if "data" in task_result and "tasks" in task_result["data"] else 0
                        })
                    else:
                        results["failed"] += 1
                        results["results"].append({
                            "admin_id": admin_id,
                            "status": "failed",
                            "error": task_result.get("message", "Unknown error") if isinstance(task_result, dict) else str(task_result)
                        })
                except Exception as e:
                    results["failed"] += 1
                    results["results"].append({
                        "admin_id": admin_id,
                        "status": "failed",
                        "error": str(e)
                    })
            
            result = {"status": "success", "data": results}
            
            if isinstance(result, dict) and result.get("status") == "success":
                data = result.get("data", {})
                self.logger.info(
                    f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á—ñ: {data.get('successful', 0)} —É—Å–ø—ñ—à–Ω–∏—Ö, "
                    f"{data.get('failed', 0)} –Ω–µ–≤–¥–∞–ª–∏—Ö –∑ {data.get('total_admins', 0)} –∞–¥–º—ñ–Ω—ñ–≤"
                )
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –Ω–µ–≤–¥–∞–ª–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
                for failed_result in data.get("results", []):
                    if failed_result.get("status") == "failed":
                        self.logger.warning(
                            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ –¥–ª—è –∞–¥–º—ñ–Ω–∞ {failed_result.get('admin_id')}: "
                            f"{failed_result.get('error', 'Unknown error')}"
                        )
            else:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –º–∞—Å–æ–≤—ñ–π –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–¥–∞—á: {result.get('message', 'Unknown error') if isinstance(result, dict) else str(result)}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–¥–∞—á: {e}")
            
    async def _cleanup_expired_tasks(self):
        """–û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á."""
        self.logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á")
        
        try:
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –ª–æ–≥—ñ–∫—É –Ω–∞–ø—Ä—è–º—É
            from datetime import timedelta
            
            three_months_ago = datetime.utcnow() - timedelta(days=90)
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á
            expired_result = await self.ai_assistant.db.admin_daily_tasks.delete_many({
                "expires_at": {"$lt": datetime.utcnow()}
            })
            
            # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–∏—Ö –∑–∞ 3 –º—ñ—Å—è—Ü—ñ (—è–∫—â–æ expires_at –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            old_result = await self.ai_assistant.db.admin_daily_tasks.delete_many({
                "created_at": {"$lt": three_months_ago},
                "expires_at": {"$exists": False}
            })
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
            def get_deleted_count(obj):
                if hasattr(obj, "deleted_count"):
                    return obj.deleted_count
                elif isinstance(obj, int):
                    return obj
                return 0
            
            total_deleted = get_deleted_count(expired_result) + get_deleted_count(old_result)
            
            result = {
                "status": "success",
                "data": {
                    "deleted_count": total_deleted,
                    "deleted_expired": get_deleted_count(expired_result),
                    "deleted_old": get_deleted_count(old_result),
                    "cleanup_date": datetime.utcnow().isoformat()
                }
            }
            
            if isinstance(result, dict) and result.get("status") == "success":
                data = result.get("data", {})
                deleted_count = data.get("deleted_count", 0)
                self.logger.info(f"üóëÔ∏è –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á")
                
                if deleted_count > 0:
                    self.logger.info(
                        f"üìä –î–µ—Ç–∞–ª—ñ –æ—á–∏—â–µ–Ω–Ω—è: {data.get('deleted_expired', 0)} –∑ expires_at, "
                        f"{data.get('deleted_old', 0)} —Å—Ç–∞—Ä–∏—Ö –±–µ–∑ expires_at"
                    )
            else:
                self.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–¥–∞—á: {result.get('message', 'Unknown error') if isinstance(result, dict) else str(result)}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")

    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
    async def manual_generate_tasks(self) -> dict:
        """–†—É—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)."""
        await self._generate_daily_tasks()
        return {"status": "completed", "message": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        
    async def manual_cleanup_tasks(self) -> dict:
        """–†—É—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)."""
        await self._cleanup_expired_tasks()
        return {"status": "completed", "message": "–û—á–∏—â–µ–Ω–Ω—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ"}


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
background_manager = BackgroundTasksManager() 