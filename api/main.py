import sys
import os
import asyncio
from datetime import datetime, time

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from api.router import Router
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware
from bot.telegram_bot import TelegramBot

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ—Ñ—Å–ø–µ–Ω –ø–æ–¥—ñ–π
from contextlib import asynccontextmanager

# –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π CORS middleware —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
from tools.database import Database
from tools.logger import Logger

logger = Logger()


class CustomCorsMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # –û–±—Ä–æ–±–ª—è—î–º–æ OPTIONS –∑–∞–ø–∏—Ç–∏
        if request.method == "OPTIONS":
            return JSONResponse(
                content={},
                status_code=200,
                headers={
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Credentials": "true",
                    "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS, PATCH",
                    "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Requested-With",
                    "Access-Control-Max-Age": "600",
                }
            )
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ–Ω—à—ñ –∑–∞–ø–∏—Ç–∏
        response = await call_next(request)
        
        # –î–æ–¥–∞—î–º–æ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ –≤—Å—ñ—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Credentials"] = "true"
        response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type, Authorization, X-Requested-With"
        
        return response


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º –¥–æ–¥–∞—Ç–∫–∞"""
    # Startup
    print("‚≠ê LIFESPAN STARTUP –ü–û–ß–ê–í–°–Ø!")
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    db = Database()
    await db.setup_indexes()
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞
    try:
        logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–æ—É—Ç–µ—Ä–∞...")
        router = Router(app)
        await router.initialize()
        logger.info("‚úÖ –†–æ—É—Ç–µ—Ä —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–æ—É—Ç–µ—Ä–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
    from api.background_tasks import background_manager
    await background_manager.start()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    from bot.telegram_bot import TelegramBot
    telegram_bot = TelegramBot()
    asyncio.create_task(telegram_bot.start_admin_bot())
    
    try:
        yield
    finally:
        # Shutdown
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        await background_manager.stop()

# –û–Ω–æ–≤–ª—é—î–º–æ FastAPI app —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ lifespan
app = FastAPI(
    title="Kovcheg Backend API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—é",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc", 
    openapi_url="/openapi.json",
    lifespan=lifespan
)

# –†–æ—É—Ç–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ lifespan

# –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
static_dir = os.path.join(os.path.dirname(__file__), "static")
if not os.path.exists(static_dir):
    os.makedirs(static_dir)
app.mount("/static", StaticFiles(directory=static_dir), name="static")

# –î–æ–¥–∞—î–º–æ –Ω–∞—à –≤–ª–∞—Å–Ω–∏–π CORS middleware
app.add_middleware(CustomCorsMiddleware)

# –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π CORS middleware —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=600,
)

# Health check endpoint
@app.get("/health")
async def health_check():
    """Health check endpoint –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

# Startup event —Ç–µ–ø–µ—Ä –≤ lifespan —Ñ—É–Ω–∫—Ü—ñ—ó

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Kovcheg API —Å–µ—Ä–≤–µ—Ä–∞...")
    print("üìç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://0.0.0.0:8002/docs")
    print("üîç –†–æ–∑—É–º–Ω–∏–π –ø–æ—à—É–∫: http://0.0.0.0:8002/search/")
    
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0", 
        port=8002, 
        reload=True,
        log_level="info"
    )